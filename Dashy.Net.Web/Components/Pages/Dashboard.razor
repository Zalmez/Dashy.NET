@page "/"
@using Dashy.Net.Web.Clients
@using Dashy.Net.Shared.ViewModels
@using Dashy.Net.Web.Services 
@using Dashy.Net.Web.Components.Widgets
@using Dashy.Net.Web.Components.Widgets.StaticLink
@using Dashy.Net.Web.Components.Widgets.Clock
@using Dashy.Net.Web.Components.Shared
@using Dashy.Net.Shared.DTOs
@using Dashy.Net.Web
@using System.Text.Json
@inject ILogger<Dashboard> Logger
@inject DashboardClient DashboardClient
@inject ViewOptionsService ViewOptions 
@implements IDisposable 

<PageTitle>@_config?.Title</PageTitle>

@if (_config is null)
{
    <p><em>Loading dashboard...</em></p>
}
else
{
    <h1>Welcome to @_config.Title</h1>

    @foreach (var currentSection in _config.Sections)
    {
        <div class="section-container">
            <h2>@currentSection.Name</h2>
            <div class="item-grid">
                @foreach (var item in currentSection.Items)
                {
                    @switch (item.Widget?.ToLower() ?? "static-link")
                    {
                        case "static-link":
                            <StaticLinkWidget Item="item" OnItemDeleted="HandleItemDeleted" OnItemEdited="() => OpenEditModal(item)" />
                            break;

                        case "clock":
                            <ClockWidget Item="item" />
                            break;

                        default:
                            <UnknownWidget Widget="@item.Widget" />
                            break;
                    }
                }
            </div>
        </div>
    }
}

<Modal Title="@_modalTitle" IsOpen="@_isModalOpen" OnClose="CloseModal">
    @if (_currentItemToEdit is not null)
    {
        <ItemEditor ItemToEdit="_currentItemToEdit" OnSave="HandleSaveItem" OnCancel="CloseModal" />
    }
</Modal>


@code {
    private DashboardConfigVm? _config;
    private bool _isModalOpen = false;
    private string _modalTitle = "";
    private ItemVm? _currentItemToEdit;

    protected override async Task OnInitializedAsync()
    {
        ViewOptions.OnEditModeChanged += OnEditModeToggled;
        _config = await DashboardClient.GetDashboardConfigAsync();
    }

    private void OnEditModeToggled()
    {
        Logger.LogInformation("Edit mode toggled! The Dashboard page received the event.");
        InvokeAsync(StateHasChanged);
    }

    private void OpenEditModal(ItemVm item)
    {
        _modalTitle = $"Edit '{item.Title}'";
        _currentItemToEdit = item with { };
        _isModalOpen = true;
        StateHasChanged();
    }

    private void CloseModal()
    {
        _isModalOpen = false;
        _currentItemToEdit = null;
        StateHasChanged();
    }

    private async Task HandleSaveItem(ItemVm itemToSave)
    {
        Logger.LogInformation("Attempting to save item ID: {ItemId}", itemToSave.Id);

        var updateDto = new UpdateItemDto(
            itemToSave.Title,
            itemToSave.Description,
            itemToSave.Url,
            itemToSave.Icon,
            itemToSave.Widget ?? "static-link",
            itemToSave.SectionId,
            itemToSave.Options
        );

        var success = await DashboardClient.UpdateItemAsync(itemToSave.Id, updateDto);

        if (!success)
        {
            // TODO: Add error handling here. Message to the user
            Logger.LogError("Failed to update item with ID: {ItemId}", itemToSave.Id);
        }
        _config = await DashboardClient.GetDashboardConfigAsync();
        CloseModal();
        StateHasChanged();
    }

    private async Task HandleItemDeleted(ItemVm itemToDelete)
    {
        var success = await DashboardClient.DeleteItemAsync(itemToDelete.Id);

        if (!success)
            // TODO: Add error handling here. Message to the user
            Logger.LogError("Failed to delete item with ID: {ItemId}", itemToDelete.Id);

        var section = _config?.Sections.FirstOrDefault(s => s.Items.Contains(itemToDelete));
            if (section is not null)
            {
                section.Items.Remove(itemToDelete);
            }
    }
    
    public void Dispose() 
    {
        ViewOptions.OnEditModeChanged -= OnEditModeToggled;
    }
}