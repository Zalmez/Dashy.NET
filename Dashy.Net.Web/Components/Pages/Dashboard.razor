@page "/"
@using BlazorSortable
@using Dashy.Net.Shared.Models
@using Dashy.Net.Shared.ViewModels
@using Dashy.Net.Web.Clients
@using Dashy.Net.Web.Services
@using Dashy.Net.Web.Components.Shared
@using Dashy.Net.Web.Components.Widgets
@inject ILogger<Dashboard> Logger
@inject IJSRuntime JSRuntime
@inject DashboardClient DashboardClient
@inject DashboardStateService DashboardState
@inject ViewOptionsService ViewOptions
@implements IDisposable

<PageTitle>@DashboardState.Config?.Title</PageTitle>

@if (DashboardState.Config is null)
{
    <p><em>Loading dashboard...</em></p>
}
else
{
    @if (ViewOptions.IsEditMode)
    {
        <div class="add-section-container">
            <button class="btn btn-primary" @onclick="OpenAddSectionModal">
                <i class="fas fa-plus"></i> Add New Section
            </button>
        </div>
    }

    <div class="content-container">
        <div class="sections-wrapper @GetLayoutClass()">
            <SortableList Class="@(GetLayoutClass() is null ? "sections-list-container" : $"sections-list-container {GetLayoutClass()}")" 
                          Items="FilteredSections.ToList()"
                          OnUpdate="async args => await OnSectionOrderChanged(args.oldIndex, args.newIndex)"
                          Sort="ViewOptions.IsEditMode"
                          Context="currentSection">
                <div class="sortable-item" @key="currentSection">
                    <div class="section-container" id="section-@currentSection.Id">
                        <div class="section-header" @onclick="() => ToggleSectionCollapse(currentSection.Id)">
                            <div class="section-header-left">
                                <i class="fas fa-chevron-down section-chevron @(_collapsedSections.Contains(currentSection.Id) ? "collapsed" : "")"></i>
                                @if (!string.IsNullOrWhiteSpace(currentSection.Icon))
                                {
                                    <i class="@currentSection.Icon section-icon"></i>
                                }
                                <h2>@currentSection.Name</h2>
                            </div>
                            @if (ViewOptions.IsEditMode)
                            {
                                <div class="section-edit-controls" @onclick:stopPropagation="true">
                                    <button class="edit-btn" title="Edit Section" @onclick="() => OpenEditSectionModal(currentSection)"><i class="fas fa-pencil-alt"></i></button>
                                    <button class="delete-btn" title="Delete Section" @onclick="() => HandleSectionDeleted(currentSection)">
                                        <i class="fas fa-trash-alt"></i>
                                    </button>
                                </div>
                            }
                        </div>
                        <div class="item-grid @GetItemSizeClass() @(_collapsedSections.Contains(currentSection.Id) ? "collapsed" : "")">
                            <SortableList Items="currentSection.Items"
                                          OnUpdate=" async (args) => await OnItemOrderChanged(currentSection, (args.oldIndex, args.newIndex))"
                                          Sort="ViewOptions.IsEditMode"
                                          Context="item">
                                <div class="sortable-item" @key="item">
                                    @switch (item.Widget?.ToLower() ?? "static-link")
                                    {
                                        case "static-link":
                                            <StaticLinkWidget Item="item" OnItemDeleted="HandleItemDeleted" OnItemEdited="() => OpenEditModal(item)" />
                                            break;
                                        case "clock":
                                            <ClockWidget Item="item" />
                                            break;
                                        default:
                                            <UnknownWidget Widget="@item.Widget" />
                                            break;
                                    }
                                </div>
                            </SortableList>
                            @if (ViewOptions.IsEditMode && !_collapsedSections.Contains(currentSection.Id))
                            {
                                <AddItemButton OnClick="() => OpenCreateModal(currentSection.Id)" />
                            }
                        </div>
                    </div>
                </div>
            </SortableList>
        </div>
    </div>

}

<Modal Title="@_itemModalTitle" IsOpen="@_isItemModalOpen" OnClose="CloseItemModal">
    @if (_currentItemToEdit is not null)
    {
        <ItemEditor EditModel="_currentItemToEdit" OnSave="HandleSaveItem" OnCancel="CloseItemModal" />
    }
</Modal>
<Modal Title="@(_sectionToEdit is null ? "Add New Section" : "Edit Section")" IsOpen="@_isSectionModalOpen" OnClose="CloseSectionModal">
    @if (_isSectionModalOpen)
    {
        <SectionEditor EditModel="@(_sectionToEdit is null ? _newSection! : new CreateSectionDto(_sectionToEdit.Name, _sectionToEdit.Icon, DashboardState.Config.Id))" OnSave="HandleSaveSection" OnCancel="CloseSectionModal" />
    }
</Modal>


@code {
    private bool _isItemModalOpen = false;
    private string _itemModalTitle = "";
    private ItemEditModel? _currentItemToEdit;

    private bool _isSectionModalOpen = false;
    private SectionVm? _sectionToEdit;
    private CreateSectionDto? _newSection;
    private HashSet<int> _collapsedSections = new();

    private IEnumerable<SectionVm> FilteredSections =>
        DashboardState.Config?.Sections.Where(section =>
            string.IsNullOrWhiteSpace(ViewOptions.SearchTerm) ||
            section.Name.Contains(ViewOptions.SearchTerm, StringComparison.OrdinalIgnoreCase) ||
            section.Items.Any(item => item.Title.Contains(ViewOptions.SearchTerm, StringComparison.OrdinalIgnoreCase))
        ) ?? Enumerable.Empty<SectionVm>();

    private string GetItemSizeClass() => "item-size-" + ViewOptions.CurrentItemSize.ToString().ToLower();

    private string GetLayoutClass()
    {
        return "layout-" + ViewOptions.CurrentLayout.ToString().ToLower();
    }

    protected override void OnInitialized()
    {
        ViewOptions.OnEditModeChanged += StateHasChanged;
        DashboardState.OnConfigLoaded += OnConfigLoadedHandler;
        ViewOptions.OnSearchTermChanged += StateHasChanged;
        ViewOptions.OnItemSizeChanged += StateHasChanged;
        ViewOptions.OnLayoutChanged += StateHasChanged;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var config = await DashboardClient.GetConfigAsync();
            DashboardState.SetConfig(config);
        }
    }

    private void OnConfigLoadedHandler() => InvokeAsync(StateHasChanged);

    private void OpenCreateModal(int sectionId)
    {
        _itemModalTitle = "Add New Item";
        _currentItemToEdit = new ItemEditModel { SectionId = sectionId, Widget = "static-link" };
        _isItemModalOpen = true;
    }

    private void OpenEditModal(ItemVm item)
    {
        _itemModalTitle = $"Edit '{item.Title}'";
        _currentItemToEdit = new ItemEditModel
        {
            Id = item.Id,
            Title = item.Title,
            Description = item.Description,
            Url = item.Url,
            Icon = item.Icon,
            Widget = item.Widget ?? "static-link",
            SectionId = item.SectionId,
            Options = item.Options
        };
        _isItemModalOpen = true;
    }

    private void OpenAddSectionModal()
    {
        if (DashboardState.Config is null) return;
        _sectionToEdit = null;
        _newSection = new CreateSectionDto("", null, DashboardState.Config.Id);
        _isSectionModalOpen = true;
    }

    private void OpenEditSectionModal(SectionVm section)
    {
        _newSection = null;
        _sectionToEdit = section;
        _isSectionModalOpen = true;
    }

    private void CloseSectionModal()
    {
        _isSectionModalOpen = false;
        _newSection = null;
        _sectionToEdit = null;
    }

    private void ToggleSectionCollapse(int sectionId)
    {
        if (ViewOptions.IsEditMode) return;
        if (_collapsedSections.Contains(sectionId))
        {
            _collapsedSections.Remove(sectionId);
        }
        else
        {
            _collapsedSections.Add(sectionId);
        }
    }

    private void CloseItemModal()
    {
        _isItemModalOpen = false;
        _currentItemToEdit = null;
    }

    private async Task HandleSaveSection(CreateSectionDto sectionToSave)
    {
        bool success;
        //sectionToSave.DashboardId = DashboardState.Config.Id
        if (_sectionToEdit is not null)
        {
            var updateDto = new UpdateSectionDto(sectionToSave.Name, sectionToSave.Icon);
            success = await DashboardClient.Sections.UpdateAsync(_sectionToEdit.Id, updateDto);
        }
        else
        {
            var sectionToCreate = new CreateSectionDto(sectionToSave.Name, sectionToSave.Icon ?? "fa-solid fa-folder", DashboardState.Config.Id);
            success = await DashboardClient.Sections.CreateAsync(sectionToCreate);
        }

        if (success)
        {
            var newConfig = await DashboardClient.GetConfigAsync();
            DashboardState.SetConfig(newConfig);
        }

        CloseSectionModal();
    }

    private async Task OnItemOrderChanged(SectionVm section, (int oldIndex, int newIndex) args)
    {
        var orderedIds = section.Items.Select(i => i.Id).ToList();
        var dto = new ReorderItemsDto(orderedIds);
        var success = await DashboardClient.Items.ReorderAsync(dto);

        if (!success)
        {
            var newConfig = await DashboardClient.GetConfigAsync();
            DashboardState.SetConfig(newConfig);
        }
    }

    private async Task OnSectionOrderChanged(int oldIndex, int newIndex)
    {
        if (DashboardState.Config is null) return;

        var orderedIds = DashboardState.Config.Sections.Select(s => s.Id).ToList();
        var dto = new ReorderSectionsDto(orderedIds);

        var success = await DashboardClient.Sections.ReorderAsync(dto);

        if (!success)
        {
            var newConfig = await DashboardClient.GetConfigAsync();
            DashboardState.SetConfig(newConfig);
        }
    }

    private async Task HandleSaveItem(ItemEditModel itemToSave)
    {
        bool success;
        if (itemToSave.Id > 0)
        {
            var updateDto = new UpdateItemDto(itemToSave.Title, itemToSave.Description, itemToSave.Url, itemToSave.Icon, itemToSave.Widget, itemToSave.SectionId, itemToSave.Options);
            success = await DashboardClient.Items.UpdateAsync(itemToSave.Id, updateDto);
        }
        else
        {
            var createDto = new CreateItemDto(itemToSave.Title, itemToSave.Description, itemToSave.Url, itemToSave.Icon, itemToSave.Widget, itemToSave.SectionId, itemToSave.Options);
            success = await DashboardClient.Items.CreateAsync(createDto);
        }

        if (success)
        {
            var newConfig = await DashboardClient.GetConfigAsync();
            DashboardState.SetConfig(newConfig);
        }

        CloseItemModal();
    }

    private async Task HandleItemDeleted(ItemVm itemToDelete)
    {
        var success = await DashboardClient.Items.DeleteAsync(itemToDelete.Id);
        if (success)
        {
            var config = DashboardState.Config;
            if (config is null) return;
            var section = config.Sections.FirstOrDefault(s => s.Items.Any(i => i.Id == itemToDelete.Id));
            if (section is not null)
            {
                var item = section.Items.FirstOrDefault(i => i.Id == itemToDelete.Id);
                if (item is not null) section.Items.Remove(item);
            }
        }
    }

    private async Task HandleSectionDeleted(SectionVm sectionToDelete)
    {
        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", $"Are you sure you want to delete the entire '{sectionToDelete.Name}' section and all of its items?");

        if (!confirmed)
        {
            return;
        }

        var success = await DashboardClient.Sections.DeleteAsync(sectionToDelete.Id);

        if (success)
        {
            DashboardState.Config?.Sections.Remove(sectionToDelete);
        }
    }

    public void Dispose()
    {
        ViewOptions.OnEditModeChanged -= StateHasChanged;
        DashboardState.OnConfigLoaded -= OnConfigLoadedHandler;
        ViewOptions.OnSearchTermChanged -= StateHasChanged;
        ViewOptions.OnItemSizeChanged -= StateHasChanged;
        ViewOptions.OnLayoutChanged -= StateHasChanged;
    }
}