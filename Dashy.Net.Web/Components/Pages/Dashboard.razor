@page "/"
@using BlazorSortable
@using Dashy.Net.Shared.Models
@using Dashy.Net.Web.Clients
@using Dashy.Net.Web.Services
@using Dashy.Net.Web.Components.Shared
@using Dashy.Net.Web.Components.Shared.Widgets
@inject ILogger<Dashboard> Logger
@inject IJSRuntime JSRuntime
@inject DashboardClient DashboardClient
@inject DashboardStateService DashboardState
@inject ViewOptionsService ViewOptions
@implements IDisposable

<PageTitle>@DashboardState.Config?.Title</PageTitle>

@if (DashboardState.Config is null)
{
    <p><em>Loading dashboard...</em></p>
}
else
{
    @if (ViewOptions.IsEditMode)
    {
        <div class="add-section-container">
            <button class="btn btn-primary" @onclick="OpenAddSectionModal">
                <i class="fas fa-plus"></i> Add New Section
            </button>
        </div>
    }

    <div class="dashboard-container @(ViewOptions.CurrentLayout.ToString().ToLower())">
        @if(ViewOptions.IsEditMode)
        {
            <SortableList Items="FilteredSections.ToList()"
                          OnUpdate="async args => await OnSectionOrderChanged(args.oldIndex, args.newIndex)"
                          Context="currentSection"
                          class="sections-wrapper">
                <div class="section-item" @key="currentSection">
                    <div class="section-container" id="section-@currentSection.Id">
                        <div class="section-header" @onclick="() => ToggleSectionCollapse(currentSection.Id)">
                        </div>
                        <div class="items-wrapper @GetItemsContainerClass(currentSection.Id)">
                            <SortableList Items="currentSection.Items"
                                          OnUpdate="(args) => OnItemOrderChanged(currentSection, (args.oldIndex, args.newIndex))"
                                          Context="item"
                                          Class="item-list">
                                <div class="item" @key="item">
                                    @switch (item.Widget?.ToLower() ?? "static-link")
                                    {
                                        case "static-link":
                                            <StaticLinkWidget Item="item" OnItemDeleted="HandleItemDeleted" OnItemEdited="() => OpenEditModal(item)" />
                                            break;
                                        case "clock":
                                            <ClockWidget Item="item" />
                                            break;
                                        default:
                                            <UnknownWidget Widget="@item.Widget" />
                                            break;
                                    }
                                </div>
                            </SortableList>
                            @if (ViewOptions.IsEditMode && !_collapsedSections.Contains(currentSection.Id))
                            {
                                <AddItemButton OnClick="() => OpenCreateModal(currentSection.Id)" />
                            }
                        </div>
                    </div>
                </div>
            </SortableList>
        }
        else
        {
            <div class="sections-wrapper">
                @foreach (var currentSection in DashboardState.Config.Sections)
                {
                    <div class="section-item" @key="currentSection">
                        <div class="section-container" id="section-@currentSection.Id">
                            <div class="section-header" @onclick="() => ToggleSectionCollapse(currentSection.Id)">
                            </div>
                            <div class="items-wrapper @GetItemsContainerClass(currentSection.Id)">
                                 <div class="item-list">
                                    @foreach (var item in currentSection.Items)
                                    {
                                        <div class="item" @key="item">
                                            @switch (item.Widget?.ToLower() ?? "static-link")
                                            {
                                                case "static-link":
                                                    <StaticLinkWidget Item="item" OnItemDeleted="HandleItemDeleted" OnItemEdited="() => OpenEditModal(item)" />
                                                    break;
                                                case "clock":
                                                    <ClockWidget Item="item" />
                                                    break;
                                                default:
                                                    <UnknownWidget Widget="@item.Widget" />
                                                    break;
                                            }
                                        </div>
                                    }
                                </div>
                            </div>
                        </div>
                    </div>                    
                }
            </div>
        }
    </div>
}

@* Modals and @code block remain unchanged *@
@code {
    private bool _isItemModalOpen = false;
    private string _itemModalTitle = "";
    private ItemEditModel? _currentItemToEdit;

    private bool _isSectionModalOpen = false;
    private SectionVm? _sectionToEdit;
    private CreateSectionDto? _newSection;
    private HashSet<int> _collapsedSections = new();

    private IEnumerable<SectionVm> FilteredSections =>
        DashboardState.Config?.Sections.Where(section =>
            string.IsNullOrWhiteSpace(ViewOptions.SearchTerm) ||
            section.Name.Contains(ViewOptions.SearchTerm, StringComparison.OrdinalIgnoreCase) ||
            section.Items.Any(item => item.Title.Contains(ViewOptions.SearchTerm, StringComparison.OrdinalIgnoreCase))
        ) ?? Enumerable.Empty<SectionVm>();

    private string GetItemSizeClass() => "item-size-" + ViewOptions.CurrentItemSize.ToString().ToLower();


    protected override void OnInitialized()
    {
        ViewOptions.OnChange += StateHasChanged;
        DashboardState.OnConfigLoaded += OnConfigLoadedHandler;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var config = await DashboardClient.GetConfigAsync();
            DashboardState.SetConfig(config);
        }
    }

    private void OnConfigLoadedHandler() => InvokeAsync(StateHasChanged);

    private void OpenCreateModal(int sectionId)
    {
        _itemModalTitle = "Add New Item";
        _currentItemToEdit = new ItemEditModel { SectionId = sectionId, Widget = "static-link" };
        _isItemModalOpen = true;
    }

    private void OpenEditModal(ItemVm item)
    {
        _itemModalTitle = $"Edit '{item.Title}'";
        _currentItemToEdit = new ItemEditModel
        {
            Id = item.Id,
            Title = item.Title,
            Icon = item.Icon,
            Widget = item.Widget ?? "static-link",
            SectionId = item.SectionId,
            Options = item.Options
        };
        _isItemModalOpen = true;
    }

    private void OpenAddSectionModal()
    {
        if (DashboardState.Config is null) return;
        _sectionToEdit = null;
        _newSection = new CreateSectionDto("", null, DashboardState.Config.Id);
        _isSectionModalOpen = true;
    }

    private void OpenEditSectionModal(SectionVm section)
    {
        _newSection = null;
        _sectionToEdit = section;
        _isSectionModalOpen = true;
    }

    private void CloseSectionModal()
    {
        _isSectionModalOpen = false;
        _newSection = null;
        _sectionToEdit = null;
    }

    private void ToggleSectionCollapse(int sectionId)
    {
        if (ViewOptions.IsEditMode) return;
        if (_collapsedSections.Contains(sectionId))
        {
            _collapsedSections.Remove(sectionId);
        }
        else
        {
            _collapsedSections.Add(sectionId);
        }
    }

    private void CloseItemModal()
    {
        _isItemModalOpen = false;
        _currentItemToEdit = null;
    }

    private async Task HandleSaveSection(CreateSectionDto sectionToSave)
    {
        bool success;
        if (_sectionToEdit is not null)
        {
            var updateDto = new UpdateSectionDto(sectionToSave.Name, sectionToSave.Icon);
            success = await DashboardClient.Sections.UpdateAsync(_sectionToEdit.Id, updateDto);
        }
        else
        {
            var sectionToCreate = new CreateSectionDto(sectionToSave.Name, sectionToSave.Icon ?? "fa-solid fa-folder", DashboardState.Config!.Id);
            success = await DashboardClient.Sections.CreateAsync(sectionToCreate);
        }

        if (success)
        {
            var newConfig = await DashboardClient.GetConfigAsync();
            DashboardState.SetConfig(newConfig);
        }
        CloseSectionModal();
    }

    private async Task OnItemOrderChanged(SectionVm section, (int oldIndex, int newIndex) args)
    {
        var orderedIds = section.Items.Select(i => i.Id).ToList();
        var dto = new ReorderItemsDto(orderedIds);
        var success = await DashboardClient.Items.ReorderAsync(dto);
        if (!success)
        {
            var newConfig = await DashboardClient.GetConfigAsync();
            DashboardState.SetConfig(newConfig);
        }
    }

    private async Task OnSectionOrderChanged(int oldIndex, int newIndex)
    {
        if (DashboardState.Config is null) return;
        var orderedIds = DashboardState.Config.Sections.Select(s => s.Id).ToList();
        var dto = new ReorderSectionsDto(orderedIds);
        var success = await DashboardClient.Sections.ReorderAsync(dto);
        if (!success)
        {
            var newConfig = await DashboardClient.GetConfigAsync();
            DashboardState.SetConfig(newConfig);
        }
    }

    private async Task HandleSaveItem(ItemEditModel itemToSave)
    {
        bool success;
        if (itemToSave.Id > 0)
        {
            var updateDto = new UpdateItemDto(itemToSave.Title, itemToSave.Icon, itemToSave.Widget, itemToSave.SectionId, itemToSave.Options);
            success = await DashboardClient.Items.UpdateAsync(itemToSave.Id, updateDto);
        }
        else
        {
            var createDto = new CreateItemDto(itemToSave.Title, itemToSave.Icon, itemToSave.Widget, itemToSave.SectionId, itemToSave.Options);
            success = await DashboardClient.Items.CreateAsync(createDto);
        }

        if (success)
        {
            var newConfig = await DashboardClient.GetConfigAsync();
            DashboardState.SetConfig(newConfig);
        }
        
        CloseItemModal();
    }

    private async Task HandleItemDeleted(ItemVm itemToDelete)
    {
        var success = await DashboardClient.Items.DeleteAsync(itemToDelete.Id);
        if (success)
        {
            var config = DashboardState.Config;
            if (config is null) return;
            var section = config.Sections.FirstOrDefault(s => s.Items.Any(i => i.Id == itemToDelete.Id));
            if (section is not null)
            {
                var item = section.Items.FirstOrDefault(i => i.Id == itemToDelete.Id);
                if (item is not null) section.Items.Remove(item);
            }
        }
    }

    private async Task HandleSectionDeleted(SectionVm sectionToDelete)
    {
        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", $"Are you sure you want to delete the entire '{sectionToDelete.Name}' section and all of its items?");
        if (!confirmed) return;
        var success = await DashboardClient.Sections.DeleteAsync(sectionToDelete.Id);
        if (success)
        {
            DashboardState.Config?.Sections.Remove(sectionToDelete);
        }
    }

    private string GetItemsContainerClass(int sectionId)
    {
        if (_collapsedSections.Contains(sectionId))
            return "collapsed";

        return ViewOptions.CurrentLayout switch
        {
            LayoutOrientation.Vertical => "layout-vertical",
            _ => "layout-auto"
        };
    }
    private string GetItemWrapperClass()
    {
        return ViewOptions.CurrentLayout switch
        {
            LayoutOrientation.Vertical => "sortable-item",
            LayoutOrientation.Auto => "col-auto sortable-item",
            _ => "col-auto sortable-item"
        };
    }

    public void Dispose()
    {
        ViewOptions.OnChange -= StateHasChanged;
        DashboardState.OnConfigLoaded -= OnConfigLoadedHandler;
    }
}
