@page "/"
@page "/dashboard/{Id:int?}"
@using Dashy.Net.Web.Helpers
@using Dashy.Net.Web.Components.Shared
@using Dashy.Net.Shared.Models
@using Dashy.Net.Web.Services
@inject ILogger<Dashboard> Logger
@inject IJSRuntime JSRuntime
@inject DashboardClient DashboardClient
@inject DashboardStateService DashboardState
@inject ViewOptionsService ViewOptions
@inject EventSubscriptionManager SubscriptionManager
@implements IDisposable

<PageTitle>@DashboardState.Config?.Title</PageTitle>

@if (DashboardState.Config is null)
{
    @if (_isInitializing)
    {
        <p><span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> <span>Initializing dashboard...</span></p>
    }
    else if (!string.IsNullOrEmpty(_initError))
    {
        <div class="alert alert-danger" style="margin-top:1rem;">@_initError</div>
        <button class="btn btn-primary" @onclick="InitializeDashboard" disabled="@_isInitializing">
            <span><i class="fas fa-rocket"></i> Retry Initialization</span>
        </button>
    }
    else
    {
        <p><em>No dashboard found.</em></p>
    }
}
else
{
    <div class="dashboard-container">
        @if (ViewOptions.IsEditMode)
        {
            <div class="add-section-container">
                <button class="btn btn-primary" @onclick="OpenAddSectionModal">
                    <i class="fas fa-plus"></i> Add New Section
                </button>
            </div>
        }

        <div class="dashboard-grid">
            @foreach (var currentSection in FilteredSections)
            {
                <div class="section-item @GetSectionSizeClass(currentSection)" @key="currentSection.Id">
                    <div class="section-container" id="section-@currentSection.Id">
                        <div class="section-header" @onclick="() => ToggleSectionCollapse(currentSection.Id)">
                            <div class="section-header-left">
                                <i class="fas fa-chevron-down section-chevron @(_collapsedSections.Contains(currentSection.Id) ? "collapsed" : "")"></i>
                                @if (!string.IsNullOrWhiteSpace(currentSection.Icon))
                                {
                                    <i class="@currentSection.Icon section-icon"></i>
                                }
                                <h2>@currentSection.Name</h2>
                            </div>
                            @if (ViewOptions.IsEditMode)
                            {
                                <div class="section-edit-controls" @onclick:stopPropagation="true">
                                    <button class="edit-btn" title="Edit Section" @onclick="() => OpenEditSectionModal(currentSection)"><i class="fas fa-pencil-alt"></i></button>
                                    <button class="delete-btn" title="Delete Section" @onclick="() => HandleSectionDeleted(currentSection)">
                                        <i class="fas fa-trash-alt"></i>
                                    </button>
                                </div>
                            }
                        </div>
                        <div class="items-wrapper @GetItemsContainerClass(currentSection.Id)">
                            @foreach (var currentItem in currentSection.Items)
                            {
                                <div class="item" @key="currentItem.Id">
                                    @switch (currentItem.Widget?.ToLower() ?? "static-link")
                                    {
                                        case "static-link":
                                            <StaticLinkWidget Item="currentItem" OnItemDeleted="HandleItemDeleted" OnItemEdited="() => OpenEditModal(currentItem)" />
                                            break;
                                        case "clock":
                                            <ClockWidget Item="currentItem" OnItemDeleted="HandleItemDeleted" OnItemEdited="() => OpenEditModal(currentItem)"/>
                                            break;
                                        case "weather":
                                            <WeatherWidget Item="currentItem" OnItemDeleted="HandleItemDeleted" OnItemEdited="() => OpenEditModal(currentItem)" />
                                            break;
                                        case "public ip":
                                            <PublicIPWidget Item="currentItem" OnItemDeleted="HandleItemDeleted" OnItemEdited="() => OpenEditModal(currentItem)" />
                                            break;
                                        case "rss feed":
                                            <RssWidget Item="currentItem" OnItemDeleted="HandleItemDeleted" OnItemEdited="() => OpenEditModal(currentItem)" />
                                            break;
                                        case "vulnerability feed":
                                            <VulnerabilityFeedWidget Item="currentItem" OnItemDeleted="HandleItemDeleted" OnItemEdited="() => OpenEditModal(currentItem)" />
                                            break;
                                        default:
                                            <UnknownWidget Item="currentItem" Widget="@currentItem.Widget" OnItemDeleted="HandleItemDeleted" OnItemEdited="() => OpenEditModal(currentItem)" />
                                            break;
                                    }
                                </div>
                            }
                            @if (ViewOptions.IsEditMode && !_collapsedSections.Contains(currentSection.Id))
                            {
                                <AddItemButton OnClick="() => OpenCreateModal(currentSection.Id)" />
                            }
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>

    <Modal Title="@_itemModalTitle" IsOpen="@_isItemModalOpen" OnClose="CloseItemModal">
        @if (_currentItemToEdit is not null)
        {
            <ItemEditor EditModel="_currentItemToEdit" OnSave="HandleSaveItem" OnCancel="CloseItemModal" />
        }
    </Modal>
    <Modal Title="@(_sectionToEdit is null ? "Add New Section" : $"Edit '{_sectionToEdit?.Name}'")" IsOpen="@_isSectionModalOpen" OnClose="CloseSectionModal">
        @if (_sectionModel is not null)
        {
            <EditForm Model="_sectionModel" OnValidSubmit="() => HandleSaveSection(_sectionModel)">
                <DataAnnotationsValidator />
                <div class="form-group">
                    <label for="section-name">Section Name</label>
                    <InputText id="section-name" class="form-control" @bind-Value="_sectionModel.Name" />
                    <ValidationMessage For="@(() => _sectionModel.Name)" />
                </div>
                <div class="form-group">
                    <label for="section-icon">Icon (e.g., "fas fa-tools")</label>
                    <InputText id="section-icon" class="form-control" @bind-Value="_sectionModel.Icon" />
                </div>
                <div class="form-actions">
                    <button type="button" class="btn btn-secondary" @onclick="CloseSectionModal">Cancel</button>
                    <button type="submit" class="btn btn-primary">Save Section</button>
                </div>
            </EditForm>
        }
    </Modal>
}

@code {
    [Parameter] public int? Id { get; set; }
    
    private bool _isItemModalOpen = false;
    private string _itemModalTitle = "";
    private ItemEditModel? _currentItemToEdit;

    private bool _isSectionModalOpen = false;
    private SectionVm? _sectionToEdit;
    private CreateSectionDto? _sectionModel;
    private HashSet<int> _collapsedSections = new();

    private bool _isDisposed;

    private bool _isInitializing = false;
    private string? _initError;

    private IEnumerable<SectionVm> FilteredSections =>
        DashboardState.Config?.Sections.Where(section =>
            string.IsNullOrWhiteSpace(ViewOptions.SearchTerm) ||
            section.Name.Contains(ViewOptions.SearchTerm, StringComparison.OrdinalIgnoreCase) ||
            section.Items.Any(item => item.Title.Contains(ViewOptions.SearchTerm, StringComparison.OrdinalIgnoreCase))
        ) ?? Enumerable.Empty<SectionVm>();

    protected override void OnInitialized()
    {
        SubscriptionManager.AddSubscription(() => DashboardState.OnConfigLoaded -= OnConfigLoadedHandler);
        SubscriptionManager.AddSubscription(() => ViewOptions.OnChange -= HandleOptionsChanged);

        DashboardState.OnConfigLoaded += OnConfigLoadedHandler;
        ViewOptions.OnChange += HandleOptionsChanged;
    }

    protected override async Task OnParametersSetAsync()
    {
        // If the ID parameter changes, reload the dashboard config
        if (DashboardState.Config?.Id != Id)
        {
            var config = await DashboardClient.GetConfigAsync(Id);
            if (!_isDisposed)
            {
                await InvokeAsync(() => DashboardState.SetConfig(config));
            }
        }
    }

    private void HandleOptionsChanged()
    {
        InvokeAsync(StateHasChanged);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var config = await DashboardClient.GetConfigAsync(Id);
            if (_isDisposed) return;
            if (config is null && !_isInitializing)
            {
                await InitializeDashboard();
            }
            else
            {
                await InvokeAsync(() => DashboardState.SetConfig(config));
            }
        }
    }

    private void OnConfigLoadedHandler()
    {
        if (_isDisposed) return;
        InvokeAsync(StateHasChanged);
    }

    private void OpenCreateModal(int sectionId)
    {
        _itemModalTitle = "Add New Item";
        _currentItemToEdit = new ItemEditModel { SectionId = sectionId, Widget = "static-link" };
        _isItemModalOpen = true;
    }

    private void OpenEditModal(ItemVm item)
    {
        _itemModalTitle = $"Edit '{item.Title}'";
        _currentItemToEdit = new ItemEditModel(item);
        _isItemModalOpen = true;
    }

    private void OpenAddSectionModal()
    {
        if (DashboardState.Config is null) return;
        _sectionToEdit = null;
        _sectionModel = new CreateSectionDto { DashboardId = DashboardState.Config.Id };
        _isSectionModalOpen = true;
    }

    private void OpenEditSectionModal(SectionVm section)
    {
        _sectionToEdit = section;
        _sectionModel = new CreateSectionDto
        {
            Name = section.Name,
            Icon = section.Icon,
            DashboardId = section.DashboardId
        };
        _isSectionModalOpen = true;
    }

    private void CloseSectionModal()
    {
        _isSectionModalOpen = false;
        _sectionToEdit = null;
        _sectionModel = null;
    }

    private void ToggleSectionCollapse(int sectionId)
    {
        if (ViewOptions.IsEditMode) return;
        if (_collapsedSections.Contains(sectionId))
        {
            _collapsedSections.Remove(sectionId);
        }
        else
        {
            _collapsedSections.Add(sectionId);
        }
    }

    private void CloseItemModal()
    {
        _isItemModalOpen = false;
        _currentItemToEdit = null;
    }

    private async Task HandleSaveSection(CreateSectionDto sectionToSave)
    {
        if (_isDisposed) return;
        bool success;
        if (_sectionToEdit is not null)
        {
            var updateDto = new UpdateSectionDto(sectionToSave.Name, sectionToSave.Icon);
            success = await DashboardClient.Sections.UpdateAsync(_sectionToEdit.Id, updateDto);
        }
        else
        {
            success = await DashboardClient.Sections.CreateAsync(sectionToSave);
        }
        if (_isDisposed) return;
        if (success)
        {
            var newConfig = await DashboardClient.GetConfigAsync(Id);
            if (_isDisposed) return;
            await InvokeAsync(() => DashboardState.SetConfig(newConfig));
        }
        CloseSectionModal();
    }

    private async Task HandleSaveItem(ItemEditModel itemToSave)
    {
        if (_isDisposed) return;
        bool success;
        if (itemToSave.Id > 0)
        {
            var updateDto = itemToSave.ToUpdateDto();
            success = await DashboardClient.Items.UpdateAsync(itemToSave.Id, updateDto);
        }
        else
        {
            var createDto = itemToSave.ToCreateDto();
            success = await DashboardClient.Items.CreateAsync(createDto);
        }

        if (_isDisposed) return;
        if (success)
        {
            var newConfig = await DashboardClient.GetConfigAsync(Id);
            if (_isDisposed) return;
            await InvokeAsync(() => DashboardState.SetConfig(newConfig));
        }

        CloseItemModal();
    }

    private async Task HandleItemDeleted(ItemVm itemToDelete)
    {
        if (_isDisposed) return;
        var success = await DashboardClient.Items.DeleteAsync(itemToDelete.Id);
        if (_isDisposed) return;
        if (success)
        {
            var config = DashboardState.Config;
            if (config is null) return;
            var section = config.Sections.FirstOrDefault(s => s.Items.Any(i => i.Id == itemToDelete.Id));
            if (section is not null)
            {
                var item = section.Items.FirstOrDefault(i => i.Id == itemToDelete.Id);
                if (item is not null) section.Items.Remove(item);
            }
        }
    }

    private async Task HandleSectionDeleted(SectionVm sectionToDelete)
    {
        if (_isDisposed) return;
        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", $"Are you sure you want to delete the entire '{sectionToDelete.Name}' section and all of its items?");
        if (_isDisposed || !confirmed) return;
        var success = await DashboardClient.Sections.DeleteAsync(sectionToDelete.Id);
        if (_isDisposed) return;
        if (success)
        {
            DashboardState.Config?.Sections.Remove(sectionToDelete);
        }
    }

    private string GetItemsContainerClass(int sectionId)
    {
        if (_collapsedSections.Contains(sectionId))
            return "collapsed";

        return "layout-" + ViewOptions.CurrentLayout.ToString().ToLower();
    }

    private string GetSectionSizeClass(SectionVm section)
    {
        var itemCount = section.Items.Count;
        var currentItemSize = ViewOptions.CurrentItemSize;
        var isVerticalLayout = ViewOptions.CurrentLayout == LayoutOrientation.Vertical;
        
        if (itemCount == 0)
            return "section-size-auto";
        if (isVerticalLayout)
        {
            return currentItemSize switch
            {
                ItemSize.Large when itemCount >= 1 => "section-size-medium", 
                ItemSize.Medium when itemCount >= 2 => "section-size-small",
                _ => "section-size-auto"
            };
        }

        if (currentItemSize == ItemSize.Large)
        {
            return itemCount switch
            {
                >= 4 => "section-size-large",
                >= 2 => "section-size-medium",
                _ => "section-size-auto"
            };
        }
        
        if (currentItemSize == ItemSize.Medium)
        {
            return itemCount switch
            {
                >= 6 => "section-size-large",
                >= 4 => "section-size-medium",
                _ => "section-size-auto"
            };
        }
        return itemCount switch
        {
            >= 8 => "section-size-medium",
            _ => "section-size-auto"
        };
    }

    private async Task InitializeDashboard()
    {
        _isInitializing = true;
        _initError = null;
        StateHasChanged();
        try
        {
            var success = await DashboardClient.SeedDashboardAsync();
            if (!success)
            {
                _initError = "Failed to initialize dashboard. Please try again or check the server logs.";
            }
            else
            {
                var config = await DashboardClient.GetConfigAsync(Id);
                if (_isDisposed) return;
                await InvokeAsync(() => DashboardState.SetConfig(config));
            }
        }
        catch (Exception ex)
        {
            _initError = $"Error: {ex.Message}";
        }
        finally
        {
            _isInitializing = false;
            StateHasChanged();
        }
    }

    public void Dispose()
    {
        SubscriptionManager.Dispose();
        _isDisposed = true;
    }
}