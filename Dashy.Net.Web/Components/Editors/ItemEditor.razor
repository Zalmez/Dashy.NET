@using Dashy.Net.Shared
@using Dashy.Net.Shared.Models
@using Dashy.Net.Web.Components.Shared.Widgets.Options
@using Dashy.Net.Web.Services
@using System.ComponentModel.DataAnnotations
@using Dashy.Net.Web.Components.Editors
@inject WidgetRegistryService WidgetRegistry
@inject FileStorageService FileStorageService

<EditForm Model="@EditModel" OnValidSubmit="@HandleValidSubmit">
    <DataAnnotationsValidator />

    <div class="form-group">
        <label for="title">Title</label>
        <InputText id="title" class="form-control" @bind-Value="EditModel.Title" />
        <ValidationMessage For="@(() => EditModel.Title)" />
    </div>

    <div class="form-group">
        <label for="widget-type">Widget Type</label>
        <InputSelect id="widget-type" class="form-control" @bind-Value="EditModel.Widget">
            @foreach (var descriptor in _availableWidgets)
            {
                <option value="@descriptor.Name">@descriptor.Name</option>
            }
        </InputSelect>
    </div>

    <div class="form-group">
        <label for="icon">Icon URL or FontAwesome Class</label>
        <InputText id="icon" class="form-control" @bind-Value="EditModel.Icon" />
    </div>

    <div class="form-group">
        <label>Or Upload New Icon</label>
        <InputFile OnChange="HandleFileSelected" class="form-control" disabled="@_isUploading" />
        @if (!string.IsNullOrEmpty(_uploadStatus))
        {
            <small class="form-text" style="color: @(_uploadSuccess ? "var(--accent-color)" : "var(--danger-color)"); margin-top: 0.5rem; display: block;">
                @_uploadStatus
            </small>
        }
    </div>

    <hr />
    <p class="subtle-text" style="margin-bottom: 1rem;">Widget-Specific Options:</p>

    @if(EditModel.Widget is null)
    {
        <p class="subtle-text">Please select a widget type to see options.</p>
    }
    else
    {
        @switch (EditModel.Widget.ToLower())
        {
            case "static-link":
                <div class="form-group">
                    <label for="url">URL</label>
                    <InputText id="url" class="form-control" @bind-Value="EditModel.Url" />
                </div>
                <div class="form-group">
                    <label for="description">Description</label>
                    <InputTextArea id="description" class="form-control" @bind-Value="EditModel.Description" />
                </div>
                <div class="form-group">
                    <label for="link-target">Open Link In</label>
                    <InputSelect id="link-target" class="form-control" @bind-Value="EditModel.LinkTarget">
                        <option value="_self">Same Tab</option>
                        <option value="_blank">New Tab</option>
                    </InputSelect>
                </div>
                break;

            case "clock":
                <div class="form-group">
                    <label for="timezone">Timezone</label>
                    <InputText id="timezone" class="form-control" @bind-Value="EditModel.Timezone" />
                </div>
                <div class="form-group">
                    <label for="time-format">Time Format</label>
                    <InputSelect id="time-format" class="form-control" @bind-Value="EditModel.TimeFormat">
                        <option value="24-hour">24-Hour</option>
                        <option value="12-hour">12-Hour</option>
                    </InputSelect>
                </div>
                break;

            case "weather":
                <div class="form-group">
                    <label for="location-name">Location Name</label>
                    <InputText id="location-name" class="form-control" @bind-Value="EditModel.LocationName" />
                </div>
                <div class="form-group">
                    <label for="latitude">Latitude</label>
                    <InputText id="latitude" class="form-control" @bind-Value="EditModel.Latitude" />
                </div>
                <div class="form-group">
                    <label for="longitude">Longitude</label>
                    <InputText id="longitude" class="form-control" @bind-Value="EditModel.Longitude" />
                </div>
                <div class="form-group">
                    <label for="unit">Unit</label>
                    <InputSelect id="unit" class="form-control" @bind-Value="EditModel.Unit">
                        <option value="celsius">Celsius</option>
                        <option value="fahrenheit">Fahrenheit</option>
                    </InputSelect>
                </div>
                break;

            case "public-ip":
                <div class="form-group">
                    <label for="provider">Provider</label>
                    <InputSelect id="provider" class="form-control" @bind-Value="EditModel.Provider">
                        <option value="ipapi.co">ipapi.co</option>
                        <option value="ipgeolocation.io">ipgeolocation.io</option>
                    </InputSelect>
                </div>
                @if (EditModel.Provider == "ipgeolocation.io")
                {
                    <div class="form-group">
                        <label for="api-key">API Key</label>
                        <InputText id="api-key" class="form-control" @bind-Value="EditModel.ApiKey" />
                    </div>
                }
                break;

            case "rss feed":
                <div class="form-group">
                    <label for="feed-url">RSS Feed URL</label>
                    <InputText id="feed-url" class="form-control" @bind-Value="EditModel.FeedUrl" />
                </div>
                <div class="form-group">
                    <label for="max-items">Maximum Items</label>
                    <InputNumber id="max-items" class="form-control" @bind-Value="EditModel.MaxItems" />
                </div>
                break;
        }
    }

    <div class="form-actions">
        <button type="button" class="btn btn-secondary" @onclick="Cancel">Cancel</button>
        <button type="submit" class="btn btn-primary" disabled="@_isUploading">
            @if (_isUploading)
            {
                <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                <span>Uploading...</span>
            }
            else
            {
                <span>Save</span>
            }
        </button>
    </div>
</EditForm>

@code {
    [Parameter, EditorRequired]
    public ItemEditModel EditModel { get; set; } = default!;

    [Parameter]
    public EventCallback<ItemEditModel> OnSave { get; set; }

    [Parameter]
    public EventCallback OnCancel { get; set; }

    private IEnumerable<IWidgetDescriptor> _availableWidgets = Enumerable.Empty<IWidgetDescriptor>();

    private Type? _editorComponentType;
    private Dictionary<string, object> _editorParameters = new();

    private bool _isUploading = false;
    private string? _uploadStatus;
    private bool _uploadSuccess = false;

    protected override void OnInitialized()
    {
        _availableWidgets = WidgetRegistry.AvailableWidgets;
    }

    protected override void OnParametersSet()
    {
        var descriptor = WidgetRegistry.GetDescriptor(EditModel.Widget);
        _editorComponentType = descriptor?.OptionsEditorComponent;
        if (_editorComponentType is not null)
        {
            _editorParameters = new Dictionary<string, object>
            {
                { "EditModel", EditModel }
            };
        }
        StateHasChanged();
    }

    private async Task HandleValidSubmit()
    {
        EditModel.Options = new Dictionary<string, object>();

        switch (EditModel.Widget)
        {
            case "static-link":
                if (!string.IsNullOrEmpty(EditModel.Url))
                {
                    EditModel.Options["url"] = EditModel.Url;
                }
                if (!string.IsNullOrEmpty(EditModel.Description))
                {
                    EditModel.Options["description"] = EditModel.Description;
                }
                if (!string.IsNullOrEmpty(EditModel.LinkTarget))
                {
                    EditModel.Options["linkTarget"] = EditModel.LinkTarget;
                }
                break;

            case "clock":
                EditModel.Options["timezone"] = EditModel.Timezone ?? "UTC";
                EditModel.Options["format"] = EditModel.TimeFormat ?? "24-hour";
                break;

            case "weather":
                if (!string.IsNullOrEmpty(EditModel.LocationName))
                {
                    EditModel.Options["locationName"] = EditModel.LocationName;
                }
                if (!string.IsNullOrEmpty(EditModel.Latitude))
                {
                    EditModel.Options["latitude"] = EditModel.Latitude;
                }
                if (!string.IsNullOrEmpty(EditModel.Longitude))
                {
                    EditModel.Options["longitude"] = EditModel.Longitude;
                }
                EditModel.Options["unit"] = EditModel.Unit;
                break;

            case "public-ip":
                EditModel.Options["provider"] = EditModel.Provider;
                if (EditModel.Provider == "ipgeolocation.io")
                {
                    EditModel.Options["apiKey"] = EditModel.ApiKey;
                }
                break;

            case "rss":
                if (!string.IsNullOrEmpty(EditModel.FeedUrl))
                {
                    EditModel.Options["feedUrl"] = EditModel.FeedUrl;
                }
                EditModel.Options["maxItems"] = EditModel.MaxItems;
                break;
        }

        await OnSave.InvokeAsync(EditModel);
    }

    private async Task Cancel()
    {
        await OnCancel.InvokeAsync();
    }

    private async Task HandleFileSelected(InputFileChangeEventArgs e)
    {
        var file = e.File;
        if (file is null) return;

        if (!file.ContentType.StartsWith("image"))
        {
            _uploadStatus = "Error: Please select an image file.";
            _uploadSuccess = false;
            return;
        }

        const long maxFileSize = 5 * 1024 * 1024; // 5MB limit
        if (file.Size > maxFileSize)
        {
            _uploadStatus = $"Error: File size exceeds the limit of {maxFileSize / 1024 / 1024}MB.";
            _uploadSuccess = false;
            return;
        }

        _isUploading = true;
        _uploadStatus = "Uploading...";
        _uploadSuccess = false;
        StateHasChanged();

        try
        {
            var newUrl = await FileStorageService.SaveImageAsync(file);

            if (!string.IsNullOrEmpty(newUrl))
            {
                EditModel.Icon = newUrl;
                _uploadStatus = "Upload successful!";
                _uploadSuccess = true;
            }
            else
            {
                _uploadStatus = "Error: Upload failed. See logs for details.";
                _uploadSuccess = false;
            }
        }
        catch (Exception ex)
        {
            _uploadStatus = "Error: An exception occurred.";
            _uploadSuccess = false;
        }
        finally
        {
            _isUploading = false;
            StateHasChanged();
        }
    }
}
