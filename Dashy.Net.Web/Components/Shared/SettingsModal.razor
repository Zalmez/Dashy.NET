@using Dashy.Net.Web.Services
@using Dashy.Net.Web.Clients
@using Dashy.Net.Shared.Models
@using Microsoft.AspNetCore.Components.Forms
@using System.ComponentModel.DataAnnotations
@inject ThemeService ThemeService
@inject ViewOptionsService ViewOptions
@inject DashboardClient DashboardClient
@inject DashboardStateService DashboardState
@inject IJSRuntime JSRuntime
@inject ILogger<SettingsModal> Logger
@inject NavigationManager NavigationManager

<div class="settings-modal">
    <div class="settings-tabs">
        <button type="button" class="settings-tab @(_activeTab == "user" ? "active" : "")"
            @onclick='() => SetActiveTab("user")'>
            <i class="fas fa-user-cog"></i> User Settings
        </button>
        <button type="button" class="settings-tab @(_activeTab == "app" ? "active" : "")"
            @onclick='() => SetActiveTab("app")'>
            <i class="fas fa-palette"></i> App Settings
        </button>
        <button type="button" class="settings-tab @(_activeTab == "auth" ? "active" : "")"
            @onclick='() => SetActiveTab("auth")'>
            <i class="fas fa-shield-alt"></i> Authentication
        </button>
    </div>

    <div class="settings-content">
        @if (_activeTab == "user")
        {
            Console.WriteLine("Rendering User Settings Tab");
            <div class="settings-section">
                <h4><i class="fas fa-paint-brush"></i> Theme</h4>
                <div class="setting-group">
                    <label>Theme Mode</label>
                    <div class="theme-selector">
                        @foreach (var theme in ThemeService.AvailableThemes)
                        {
                            <button type="button"
                                class="theme-option @(ThemeService.CurrentTheme.CssClass == theme.CssClass ? "active" : "")"
                                @onclick="() => HandleThemeChange(theme.CssClass)">
                                <i class="fas @(theme.CssClass == "theme-light" ? "fa-sun" : "fa-moon")"></i>
                                @theme.Name
                            </button>
                        }
                    </div>
                </div>
            </div>

            <div class="settings-section">
                <h4><i class="fas fa-layout"></i> Layout Preferences</h4>
                <div class="setting-group">
                    <label>Default Layout</label>
                    <div class="layout-selector">
                        <button type="button"
                            class="layout-option @(ViewOptions.CurrentLayout == LayoutOrientation.Auto ? "active" : "")"
                            @onclick="() => ViewOptions.SetLayout(LayoutOrientation.Auto)">
                            <i class="fas fa-th-large"></i> Auto
                        </button>
                        <button type="button"
                            class="layout-option @(ViewOptions.CurrentLayout == LayoutOrientation.Vertical ? "active" : "")"
                            @onclick="() => ViewOptions.SetLayout(LayoutOrientation.Vertical)">
                            <i class="fas fa-bars"></i> Vertical
                        </button>
                    </div>
                </div>

                <div class="setting-group">
                    <label>Default Item Size</label>
                    <div class="size-selector">
                        <button type="button"
                            class="size-option @(ViewOptions.CurrentItemSize == ItemSize.Small ? "active" : "")"
                            @onclick="() => ViewOptions.SetItemSize(ItemSize.Small)">
                            <i class="fas fa-compress"></i> Small
                        </button>
                        <button type="button"
                            class="size-option @(ViewOptions.CurrentItemSize == ItemSize.Medium ? "active" : "")"
                            @onclick="() => ViewOptions.SetItemSize(ItemSize.Medium)">
                            <i class="fas fa-grip-horizontal"></i> Medium
                        </button>
                        <button type="button"
                            class="size-option @(ViewOptions.CurrentItemSize == ItemSize.Large ? "active" : "")"
                            @onclick="() => ViewOptions.SetItemSize(ItemSize.Large)">
                            <i class="fas fa-expand"></i> Large
                        </button>
                    </div>
                </div>
            </div>
        }
        else if (_activeTab == "app")
        {
            Console.WriteLine("Rendering App Settings Tab");
            <div class="settings-section">
                <h4><i class="fas fa-info-circle"></i> Dashboard Information</h4>
                <EditForm Model="_dashboardSettings" OnValidSubmit="HandleSaveDashboardSettings">
                    <DataAnnotationsValidator />
                    <div class="setting-group">
                        <label for="dashboard-title">Dashboard Title</label>
                        <InputText id="dashboard-title" class="form-control" @bind-Value="_dashboardSettings.Title" />
                        <ValidationMessage For="@(() => _dashboardSettings.Title)" />
                    </div>

                    <div class="setting-group">
                        <label for="dashboard-subtitle">Dashboard Subtitle</label>
                        <InputText id="dashboard-subtitle" class="form-control" @bind-Value="_dashboardSettings.Subtitle" />
                        <ValidationMessage For="@(() => _dashboardSettings.Subtitle)" />
                        <small class="form-text ">Optional subtitle displayed below the main title</small>
                    </div>

                    <div class="setting-actions">
                        <button type="submit" class="btn btn-primary" disabled="@_isSaving">
                            @if (_isSaving)
                            {
                                <i class="fas fa-spinner fa-spin"></i>
                            }
                            else
                            {
                                <i class="fas fa-save"></i>
                            }
                            Save Changes
                        </button>
                    </div>
                </EditForm>

                @if (!string.IsNullOrEmpty(_saveMessage))
                {
                    <div class="alert @(_saveSuccess ? "alert-success" : "alert-danger")" style="margin-top: 1rem;">
                        @_saveMessage
                    </div>
                }
            </div>
        }
        else if (_activeTab == "auth")
        {
            Console.WriteLine("Rendering Authentication Settings Tab");
            <div class="settings-section">
                <h4><i class="fas fa-shield-alt"></i> Authentication Status</h4>
                @if (!string.IsNullOrWhiteSpace(Environment.GetEnvironmentVariable("auth_authority")) &&
                            !string.IsNullOrWhiteSpace(Environment.GetEnvironmentVariable("auth_clientid")) &&
                            !string.IsNullOrWhiteSpace(Environment.GetEnvironmentVariable("auth_clientsecret")))
                {
                    <div class="alert alert-success">
                        <i class="fas fa-check-circle"></i> Authentication is enabled.
                    </div>
                }
                else
                {
                    <div class="alert alert-danger">
                        <i class="fas fa-times-circle"></i> Authentication is not configured.
                    </div>
                }
            </div>
        }
    </div>
</div>

@code {
    [Parameter] public EventCallback OnClose { get; set; }

    private string _activeTab = "user";
    private bool _isSaving = false;
    private string? _saveMessage;
    private bool _saveSuccess = false;
    private string? _clientSecret;
    private bool _isDisposed;

    private DashboardSettingsModel _dashboardSettings = new();
    private AuthenticationSettings _authSettings = new();

    private List<AuthenticationProviderTemplate> _providerTemplates = new();
    private string _selectedProviderType = string.Empty;
    public string SelectedProviderType
    {
        get => _selectedProviderType;
        set
        {
            if (_selectedProviderType != value)
            {
                _selectedProviderType = value;
                Logger.LogInformation($"SelectedProviderType changed to: {_selectedProviderType}");
                LoadProviderTemplate().ConfigureAwait(false);
            }
        }
    }
    private AuthenticationProviderTemplate? _currentTemplate;
    private Dictionary<string, string> _providerSettings = new();

    private string _tempMetadataAddress = string.Empty;
    private string _tempClientId = string.Empty;
    private string _tempClientSecret = string.Empty;
    private string _tempScopes = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        Logger.LogInformation("OnInitializedAsync started");
        _currentTemplate = new();
        // Load current dashboard settings
        if (DashboardState.Config is not null)
        {
            _dashboardSettings = new DashboardSettingsModel
            {
                Title = DashboardState.Config.Title,
                Subtitle = DashboardState.Config.Subtitle
            };
            Logger.LogInformation("Dashboard settings loaded");
        }

        // Load provider templates
        try
        {
            _providerTemplates = (await DashboardClient.Settings.Auth.Templates.GetAllAsync()).ToList();
            Logger.LogInformation($"Loaded {_providerTemplates.Count} provider templates");
        }
        catch (Exception ex)
        {
            Logger.LogError($"Failed to load provider templates: {ex.Message}");
        }

        // Load authentication settings
        try
        {
            var authSettings = await DashboardClient.Settings.Auth.GetAsync();
            if (authSettings is not null)
            {
                _authSettings = authSettings;
                Logger.LogInformation("Authentication settings loaded");

                // Try to determine provider type from existing settings
                if (!string.IsNullOrEmpty(_authSettings.Authority))
                {
                    _selectedProviderType = DetermineProviderTypeFromAuthority(_authSettings.Authority);
                    Logger.LogInformation($"Determined provider type: {_selectedProviderType}");
                    await LoadProviderTemplate();
                    PopulateExistingSettings();
                }
            }
        }
        catch (Exception ex)
        {
            Logger.LogError($"Failed to load auth settings: {ex.Message}");
        }
    }

    protected override void OnInitialized()
    {
        _isDisposed = false;
    }

    public void Dispose()
    {
        _isDisposed = true;
    }

    private string DetermineProviderTypeFromAuthority(string authority)
    {
        if (authority.Contains("login.microsoftonline.com") || authority.Contains("sts.windows.net"))
            return "AzureAD";
        return "GenericOAuth";
    }

    private async Task OnProviderTypeChanged(ChangeEventArgs e)
    {
        Logger.LogInformation("OnProviderTypeChanged triggered");
        _selectedProviderType = e.Value?.ToString() ?? string.Empty;
        Logger.LogInformation($"Selected Provider Type: {_selectedProviderType}");
        await LoadProviderTemplate();
        StateHasChanged();
    }

    private async Task OnValueChanged(string value)
    {
        if (_isDisposed) return;

        Logger.LogInformation("OnValueChanged triggered");
        _selectedProviderType = value;
        Logger.LogInformation($"Selected Provider Type: {_selectedProviderType}");

        await LoadProviderTemplate();

        if (_isDisposed) return;
        StateHasChanged();
    }

    private async Task LoadProviderTemplate()
    {
        try
        {
            Logger.LogInformation("LoadProviderTemplate triggered");
            _currentTemplate = _providerTemplates.FirstOrDefault(t => t.ProviderType == _selectedProviderType);
            if (_currentTemplate != null)
            {
                Logger.LogInformation($"Loaded Template: {_currentTemplate.Name}");
                _providerSettings.Clear();
                foreach (var setting in _currentTemplate.Settings)
                {
                    _providerSettings[setting.Key] = setting.Value.DefaultValue ?? string.Empty;
                }
            }
            else
            {
                Logger.LogWarning("No matching template found.");
            }

        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Failed to load provider template");
        }
    }

    private void PopulateExistingSettings()
    {
        if (_currentTemplate == null) return;

        if (_currentTemplate.Settings.ContainsKey("Authority"))
            _providerSettings["Authority"] = _authSettings.Authority ?? string.Empty;

        if (_currentTemplate.Settings.ContainsKey("ClientId"))
            _providerSettings["ClientId"] = _authSettings.ClientId ?? string.Empty;

        if (_currentTemplate.Settings.ContainsKey("ClientSecret"))
            _providerSettings["ClientSecret"] = string.Empty;
    }

    private void SetActiveTab(string tab)
    {
        _activeTab = tab;
        _saveMessage = null;
    }

    private async Task HandleThemeChange(string themeClass)
    {
        try
        {
            await JSRuntime.InvokeVoidAsync("saveToLocalStorage", "dashy-theme", themeClass);
            ThemeService.SetTheme(themeClass);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Failed to change theme: {ex.Message}");
        }
    }

    private async Task HandleSaveDashboardSettings()
    {
        if (DashboardState.Config is null) return;

        _isSaving = true;
        _saveMessage = null;
        StateHasChanged();

        try
        {
            var updateDto = new UpdateDashboardDto
            {
                Title = _dashboardSettings.Title,
                Subtitle = _dashboardSettings.Subtitle
            };

            var success = await DashboardClient.UpdateAsync(DashboardState.Config.Id, updateDto);

            if (success)
            {
                var newConfig = await DashboardClient.GetConfigAsync();
                if (newConfig is not null)
                {
                    await InvokeAsync(() => DashboardState.SetConfig(newConfig));
                }

                _saveMessage = "Dashboard settings saved successfully!";
                _saveSuccess = true;
            }
            else
            {
                _saveMessage = "Failed to save dashboard settings. Please try again.";
                _saveSuccess = false;
            }
        }
        catch (Exception ex)
        {
            _saveMessage = $"Error saving settings: {ex.Message}";
            _saveSuccess = false;
        }
        finally
        {
            _isSaving = false;
            StateHasChanged();
        }
    }

    private async Task HandleSaveAuthSettings()
    {
        _isSaving = true;
        _saveMessage = null;
        StateHasChanged();

        try
        {
            if (_currentTemplate?.ProviderType != "AzureAD")
                UpdateProviderSettings();

            if (_authSettings.IsEnabled)
            {
                if (string.IsNullOrEmpty(_selectedProviderType))
                {
                    _saveMessage = "Please select an authentication provider type.";
                    _saveSuccess = false;
                    return;
                }
                if (_currentTemplate != null)
                {
                    foreach (var setting in _currentTemplate.Settings.Where(s => s.Value.IsRequired))
                    {
                        if (string.IsNullOrWhiteSpace(_providerSettings[setting.Key]) &&
                        !(_authSettings.Id > 0 && setting.Value.IsSecret))
                        {
                            _saveMessage = $"{setting.Value.DisplayName} is required.";
                            _saveSuccess = false;
                            return;
                        }
                    }
                }
            }

            if (_authSettings.IsEnabled)
            {
                if (_providerSettings.ContainsKey("MetadataAddress"))
                    _authSettings.Authority = _providerSettings["MetadataAddress"];

                if (_providerSettings.ContainsKey("ClientId"))
                    _authSettings.ClientId = _providerSettings["ClientId"];

                if (_providerSettings.ContainsKey("TenantId"))
                    _authSettings.TenantId = _providerSettings["TenantId"];

                if (_providerSettings.ContainsKey("ClientSecret") && !string.IsNullOrWhiteSpace(_providerSettings["ClientSecret"]))
                    _authSettings.ClientSecret = _providerSettings["ClientSecret"];
                if (_providerSettings.ContainsKey("Scopes") && !string.IsNullOrWhiteSpace(_providerSettings["Scopes"]))
                    _authSettings.Scopes = _providerSettings["Scopes"];
                // Auto-generate Authority for Azure AD if not provided
                if (_selectedProviderType == "AzureAD" &&
                string.IsNullOrWhiteSpace(_authSettings.Authority) &&
                !string.IsNullOrWhiteSpace(_authSettings.TenantId))
                {
                    _authSettings.Authority = $"https://login.microsoftonline.com/{_authSettings.TenantId}";
                }
            }
            if (string.IsNullOrEmpty(_authSettings.ClientId) || string.IsNullOrEmpty(_authSettings.Authority) ||
            string.IsNullOrEmpty(_authSettings.ClientSecret))
                throw new Exception("Client Configuration was not passed correctly.");
            var success = await DashboardClient.Settings.Auth.UpdateAsync(_authSettings);

            if (success)
            {
                _saveMessage = "Authentication settings saved successfully!" +
                (_authSettings.IsEnabled ? " You may need to restart the application for changes to take effect." : "");
                _saveSuccess = true;

                // Clear secret fields
                if (_providerSettings.ContainsKey("ClientSecret"))
                    _providerSettings["ClientSecret"] = string.Empty;
            }
            else
            {
                _saveMessage = "Failed to save authentication settings. Please try again.";
                _saveSuccess = false;
            }
        }
        catch (Exception ex)
        {
            _saveMessage = $"Error saving authentication settings: {ex.Message}";
            _saveSuccess = false;
        }
        finally
        {
            _isSaving = false;
            StateHasChanged();
        }
    }

    private void OnSettingChanged(string key, string value)
    {
        if (_providerSettings.ContainsKey(key))
        {
            _providerSettings[key] = value;
        }
        else
        {
            _providerSettings.Add(key, value);
        }
    }

    private void OnTemplateChanged(AuthenticationProviderTemplate template)
    {
        _currentTemplate = template;
        OnValueChanged(_selectedProviderType).ConfigureAwait(false);
    }

    private void UpdateProviderSettings()
    {
        _providerSettings["MetadataAddress"] = _tempMetadataAddress;
        _providerSettings["ClientId"] = _tempClientId;
        _providerSettings["ClientSecret"] = _tempClientSecret;
        _providerSettings["Scopes"] = _tempScopes;
    }

    public class DashboardSettingsModel
    {
        [Required(AllowEmptyStrings = false)]
        [StringLength(200, ErrorMessage = "Title cannot exceed 200 characters")]
        public string Title { get; set; } = string.Empty;

        [StringLength(500, ErrorMessage = "Subtitle cannot exceed 500 characters")]
        public string? Subtitle { get; set; }
    }
}
