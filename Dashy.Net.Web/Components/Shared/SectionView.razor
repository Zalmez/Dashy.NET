@using Dashy.Net.Shared.Models
@using Dashy.Net.Web.Services
@using BlazorSortable

@inject ViewOptionsService ViewOptions

<div class="section-container" id="section-@Section.Id">
    <div class="section-header" @onclick="ToggleCollapse">
        <div class="section-header-left">
            <i class="fas fa-chevron-down section-chevron @(IsCollapsed ? "collapsed" : "")"></i>
            @if (!string.IsNullOrWhiteSpace(Section.Icon))
            {
                <i class="@Section.Icon section-icon"></i>
            }
            <h2>@Section.Name</h2>
        </div>
        @if (ViewOptions.IsEditMode)
        {
            <div class="section-edit-controls" @onclick:stopPropagation="true">
                <button class="edit-btn" title="Edit Section" @onclick="() => OnSectionEdited.InvokeAsync(Section)"><i class="fas fa-pencil-alt"></i></button>
                <button class="delete-btn" title="Delete Section" @onclick="() => OnSectionDeleted.InvokeAsync(Section)">
                    <i class="fas fa-trash-alt"></i>
                </button>
            </div>
        }
    </div>

    <div class="item-grid @GetItemSizeClass() @(IsCollapsed ? "collapsed" : "")">
        <SortableList Items="Section.Items" 
                      OnUpdate="(args) => OnItemOrderChanged.InvokeAsync((Section, (args.oldIndex, args.newIndex)))" 
                      Sort="ViewOptions.IsEditMode" 
                      Context="item">
            <div class="sortable-item" @key="item">
                @switch (item.Widget?.ToLower() ?? "static-link")
                {
                    case "static-link":
                        <StaticLinkWidget Item="item" OnItemDeleted="item => OnItemDeleted.InvokeAsync(item)" OnItemEdited="() => OnItemEdited.InvokeAsync(item)" />
                        break;
                    case "clock":
                        <ClockWidget Item="item" />
                        break;
                    default:
                        <UnknownWidget Widget="@item.Widget" />
                        break;
                }
            </div>
        </SortableList>

        @if (ViewOptions.IsEditMode && !IsCollapsed)
        {
            <AddItemButton OnClick="() => OnItemAdded.InvokeAsync(Section.Id)" />
        }
    </div>
</div>

@code {
    [Parameter, EditorRequired]
    public SectionVm Section { get; set; } = default!;
    
    [Parameter]
    public bool IsCollapsed { get; set; }

    [Parameter]
    public EventCallback OnToggleCollapse { get; set; }

    [Parameter] public EventCallback<int> OnItemAdded { get; set; }
    [Parameter] public EventCallback<ItemVm> OnItemEdited { get; set; }
    [Parameter] public EventCallback<ItemVm> OnItemDeleted { get; set; }
    [Parameter] public EventCallback<SectionVm> OnSectionEdited { get; set; }
    [Parameter] public EventCallback<SectionVm> OnSectionDeleted { get; set; }
    [Parameter] public EventCallback<(SectionVm section, (int oldIndex, int newIndex) args)> OnItemOrderChanged { get; set; }

    protected override void OnInitialized()
    {
        ViewOptions.OnChange += StateHasChanged;
    }

    public void Dispose()
    {
        ViewOptions.OnChange -= StateHasChanged;
    }

    private string GetItemSizeClass()
    {
        return "item-size-" + ViewOptions.CurrentItemSize.ToString().ToLower();
    }

    private async Task ToggleCollapse()
    {
        if (!ViewOptions.IsEditMode)
        {
            await OnToggleCollapse.InvokeAsync();
        }
    }
}
