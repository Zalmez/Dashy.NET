@using Dashy.Net.Shared.Models

<EditForm Model="@EditModel" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />

    <div class="form-group">
        <label for="section-name">Section Name</label>
        <InputText
            id="section-name"
            class="form-control"
            Value="@EditModel.Name"
            ValueChanged="@((string newValue) => EditModel.Name = newValue)" />
        <ValidationMessage For="@(() => EditModel.Name)" />
    </div>

    <div class="form-group">
        <label for="section-icon">Icon (e.g., "fas fa-tools")</label>
        <InputText
            id="section-icon"
            class="form-control"
            Value="@EditModel.Icon"
            ValueChanged="@((string newValue) => EditModel.Icon = newValue)" />
    </div>

    <div class="form-actions">
        <button type="button" class="btn btn-secondary" @onclick="Cancel">Cancel</button>
        <button type="submit" class="btn btn-primary">Save Section</button>
    </div>
</EditForm>

@code {
    [Parameter, EditorRequired]
    public CreateSectionDto EditModel { get; set; } = default!;

    [Parameter]
    public EventCallback<CreateSectionDto> OnSave { get; set; }

    [Parameter]
    public EventCallback OnCancel { get; set; }

    private async Task HandleValidSubmit()
    {
        await OnSave.InvokeAsync(EditModel);
    }

    private async Task Cancel()
    {
        await OnCancel.InvokeAsync();
    }
}