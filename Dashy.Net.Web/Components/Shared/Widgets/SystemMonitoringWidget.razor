@inherits WidgetBase
@inject IJSRuntime JSRuntime
@implements IDisposable

<div class="glass-tile @GetTileColorClass() @GetItemSizeClass()">
    @if (ViewOptions.IsEditMode)
    {
        <div class="item-edit-controls">
            <button class="edit-btn" title="Edit Item" @onclick="OnEditClick" @onclick:stopPropagation="true"><i class="fas fa-pencil-alt"></i></button>
            <button class="delete-btn" title="Delete Item" @onclick="OnDeleteClick" @onclick:stopPropagation="true"><i class="fas fa-trash-alt"></i></button>
        </div>
    }

    <div class="tile-content">
        <div class="tile-icon">
            <i class="fas fa-desktop"></i>
        </div>
        <div class="tile-title">System Monitor</div>
        @if (ViewOptions.CurrentItemSize == ItemSize.Large)
        {
            <div class="tile-description">
                CPU: @_cpuUsage% | RAM: @_ramUsage MB
            </div>
        }
        else if (ViewOptions.CurrentItemSize == ItemSize.Medium)
        {
            <div class="tile-description">
                CPU: @_cpuUsage%
            </div>
        }
    </div>
</div>

@code {
    private int _cpuUsage = 0;
    private int _ramUsage = 0;
    private int _networkUsage = 0;
    private Timer? _timer;
    private Random _random = new Random();

    private string GetTileColorClass()
    {
        return GetOption("tileColor") switch
        {
            "primary" => "tile-primary",
            "secondary" => "tile-secondary", 
            "success" => "tile-success",
            "warning" => "tile-warning",
            "danger" => "tile-danger",
            "info" => "tile-info",
            _ => "tile-default"
        };
    }

    private async Task OnDeleteClick()
    {
        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", $"Are you sure you want to delete '{Item.Title}'?");
        if (IsDisposed) return;
        if (confirmed)
        {
            await OnItemDeleted.InvokeAsync(Item);
        }
    }

    private async Task OnEditClick()
    {
        await OnItemEdited.InvokeAsync();
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        // Simulate system monitoring with random values
        _timer = new Timer(UpdateMetrics, null, TimeSpan.Zero, TimeSpan.FromSeconds(2));
    }

    private void UpdateMetrics(object? state)
    {
        _cpuUsage = _random.Next(10, 85);
        _ramUsage = _random.Next(2000, 8000);
        _networkUsage = _random.Next(50, 500);

        if (!IsDisposed)
        {
            InvokeAsync(StateHasChanged);
        }
    }

    public override void Dispose()
    {
        _timer?.Dispose();
        base.Dispose();
    }
}


