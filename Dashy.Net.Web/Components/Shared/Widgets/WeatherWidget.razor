@inherits WidgetBase
@inject WeatherClient WeatherClient
@inject IJSRuntime JSRuntime

<div class="glass-tile @GetTileColorClass() @GetItemSizeClass()" @onclick:preventDefault="ViewOptions.IsEditMode">
    @if (ViewOptions.IsEditMode)
    {
        <div class="item-edit-controls">
            <button class="edit-btn" title="Edit Item" @onclick="OnEditClick" @onclick:stopPropagation="true"><i
                    class="fas fa-pencil-alt"></i></button>
            <button class="delete-btn" title="Delete Item" @onclick="OnDeleteClick" @onclick:stopPropagation="true"><i
                    class="fas fa-trash-alt"></i></button>
        </div>
    }

    <div class="tile-content">
        @if (_isLoading)
        {
            <div class="tile-icon">
                <i class="fas fa-spinner fa-spin"></i>
            </div>
            <div class="tile-title">Loading weather...</div>
        }
        else if (_weather is not null)
        {
            <div class="tile-icon weather-icon">@GetWeatherIcon(_weather.WeatherCode)</div>
            <div class="weather-details">
                <div class="tile-title temperature">@_weather.Temperature.ToString("0.0")°@UnitSymbol</div>
                @if (ViewOptions.CurrentItemSize == ItemSize.Large || ViewOptions.CurrentItemSize == ItemSize.Medium)
                {
                    <div class="tile-description location">@LocationName</div>
                }
            </div>
        }
        else
        {
            <div class="tile-icon">
                <i class="fas fa-exclamation-triangle"></i>
            </div>
            <div class="tile-title error-message">@_errorMessage</div>
        }
    </div>
</div>

@code {
    private CurrentWeather? _weather;
    private bool _isLoading = true;
    private string _errorMessage = "Could not load weather.";

    private string LocationName => GetOption("locationName") ?? "Oslo";
    private double Latitude => double.TryParse(GetOption("latitude"), out var lat) ? lat : 59.91;
    private double Longitude => double.TryParse(GetOption("longitude"), out var lon) ? lon : 10.75;
    private string Unit => GetOption("unit") ?? "celsius";
    private string UnitSymbol => Unit.Equals("fahrenheit", StringComparison.OrdinalIgnoreCase) ? "F" : "C";

    protected override async Task OnInitializedAsync()
    {
        base.OnInitialized();
        try
        {
            _weather = await WeatherClient.GetWeatherAsync(Latitude, Longitude, Unit);
            if (IsDisposed) return;

            if (_weather is null)
            {
                _errorMessage = "Weather data unavailable.";
            }
        }
        catch (Exception)
        {
            if (IsDisposed) return;
        }
        finally
        {
            if (!IsDisposed)
            {
                _isLoading = false;
            }
        }
    }

    // This method converts weather codes from the API into user-friendly emoji
    private string GetWeatherIcon(int code) => code switch
    {
        0 => "☀️",
        1 or 2 or 3 => "⛅️",
        45 or 48 => "🌫️",
        51 or 53 or 55 or 61 or 63 or 65 => "🌧️",
        56 or 57 or 66 or 67 => "🥶",
        71 or 73 or 75 or 77 => "❄️",
        80 or 81 or 82 => "🌦️",
        85 or 86 => "🌨️",
        95 or 96 or 99 => "⛈️",
        _ => "❓"
    };

    private string GetTileColorClass()
    {
        var hash = Item.Title.GetHashCode();
        var colors = new[] { "blue", "green", "purple", "orange", "red", "pink", "teal" };
        return colors[Math.Abs(hash) % colors.Length];
    }

    private async Task OnDeleteClick()
    {
        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", $"Are you sure you want to delete '{Item.Title}'?");
        if (IsDisposed) return;
        if (confirmed)
        {
            await OnItemDeleted.InvokeAsync(Item);
        }
    }

    private async Task OnEditClick()
    {
        await OnItemEdited.InvokeAsync();
    }
}