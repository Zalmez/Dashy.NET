@using Dashy.Net.Shared.Models
@inherits WidgetBase

<div class="glass-tile @GetTileColorClass() @GetItemSizeClass()" @onclick:preventDefault="ViewOptions.IsEditMode">
    @if (ViewOptions.IsEditMode)
    {
        <div class="item-edit-controls">
            <button class="edit-btn" title="Edit Item" @onclick="EditWidget" @onclick:stopPropagation="true"><i
                    class="fas fa-pencil-alt"></i></button>
            <button class="delete-btn" title="Delete Item" @onclick="DeleteWidget" @onclick:stopPropagation="true"><i
                    class="fas fa-trash-alt"></i></button>
        </div>
    }

    <div class="tile-content clock-widget-container">
        @if (string.IsNullOrWhiteSpace(_errorMessage))
        {
            <div class="time-display">@_currentTime.ToString(TimeFormat)</div>
            @if (ViewOptions.CurrentItemSize == ItemSize.Large || ViewOptions.CurrentItemSize == ItemSize.Medium)
            {
                <div class="date-display">@_currentTime.ToString(DateFormat)</div>
            }
        }
        else
        {
            <div class="tile-icon">
                <i class="fas fa-exclamation-triangle"></i>
            </div>
            <div class="tile-title error-message">@_errorMessage</div>
        }
    </div>
</div>

@code
{
    private System.Threading.Timer? _timer;
    private DateTime _currentTime = DateTime.Now;
    private string? _errorMessage;

    private string TimeFormat => GetOption("timeFormat") ?? "HH:mm:ss";
    private string DateFormat => GetOption("dateFormat") ?? "dddd, MMMM d";

    protected override void OnInitialized()
    {
        base.OnInitialized();

        _timer = new Timer(UpdateTime, null, TimeSpan.Zero, TimeSpan.FromSeconds(1));
    }

    private async void OnTimerElapsed(object? sender, System.Timers.ElapsedEventArgs e)
    {
        _currentTime = DateTime.Now;
        await InvokeAsync(StateHasChanged);
    }

    private void UpdateTime(object? state)
    {
        if (IsDisposed) return;
        _currentTime = DateTime.Now;
        InvokeAsync(StateHasChanged);
    }

    private string GetTileColorClass()
    {
        var hash = Item.Title.GetHashCode();
        var colors = new[] { "blue", "green", "purple", "orange", "red", "pink", "teal" };
        return colors[Math.Abs(hash) % colors.Length];
    }

    private async Task EditWidget()
    {
        await OnItemEdited.InvokeAsync();
    }

    private async Task DeleteWidget()
    {
        await OnItemDeleted.InvokeAsync(Item);
    }
    public override void Dispose()
    {
        base.Dispose();
        _timer?.Dispose();
    }

}

