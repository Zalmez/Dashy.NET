@using Dashy.Net.Shared.Models
@using Dashy.Net.Web.Services
@inject ViewOptionsService ViewOptions
@inject IJSRuntime JSRuntime
@inject ILogger<StaticLinkWidget> Logger
@inject NavigationManager NavManager

<div class="item-card-wrapper">
    @if (ViewOptions.IsEditMode)
    {
        <div class="item-edit-controls">
            <button class="edit-btn" title="Edit Item" @onclick="OnEditClick"><i class="fas fa-pencil-alt"></i></button>
            <button class="delete-btn" title="Delete Item" @onclick="OnDeleteClick"><i class="fas fa-trash-alt"></i></button>
        </div>
    }

    <div class="item-card" @onclick="NavigateToUrl">
        <div class="item-icon">
            @if (!string.IsNullOrWhiteSpace(Item.Icon))
            {
                @if (Item.Icon.StartsWith("/") || Item.Icon.StartsWith("http"))
                {
                    <img src="@Item.Icon" alt="@Item.Title" class="item-img-icon" />
                }
                else
                {
                    <i class="@Item.Icon"></i>
                }
            }
        </div>
        <div class="item-details">
            <div class="item-title">@Item.Title</div>

            @if (!string.IsNullOrWhiteSpace(Description))
            {
                <div class="item-description">@Description</div>
            }
        </div>
    </div>
</div>

@code {
    [Parameter, EditorRequired]
    public ItemVm Item { get; set; } = default!;

    [Parameter]
    public EventCallback<ItemVm> OnItemDeleted { get; set; }

    [Parameter]
    public EventCallback OnItemEdited { get; set; }

    private string? Url => Item.Options?.GetValueOrDefault("Url")?.ToString();
    private string? Description => Item.Options?.GetValueOrDefault("Description")?.ToString();


    private async Task OnDeleteClick()
    {
        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", $"Are you sure you want to delete '{Item.Title}'?");
        if (confirmed)
        {
            await OnItemDeleted.InvokeAsync(Item);
        }
    }

    private async Task OnEditClick()
    {
        await OnItemEdited.InvokeAsync();
    }

    private void NavigateToUrl()
    {
        if (!ViewOptions.IsEditMode && !string.IsNullOrWhiteSpace(Url))
        {
            NavManager.NavigateTo(Url, forceLoad: true);
        }
    }
}