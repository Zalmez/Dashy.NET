@inherits WidgetBase
@inject IJSRuntime JSRuntime
@inject ILogger<StaticLinkWidget> Logger
@inject NavigationManager NavManager
@implements IDisposable

<div class="glass-tile @GetTileColorClass() @GetItemSizeClass()" @onclick="HandleTileClick"
    @onclick:preventDefault="ViewOptions.IsEditMode">
    @if (ViewOptions.IsEditMode)
    {
        <div class="item-edit-controls">
            <button class="edit-btn" title="Edit Item" @onclick="OnEditClick" @onclick:stopPropagation="true"><i
                    class="fas fa-pencil-alt"></i></button>
            <button class="delete-btn" title="Delete Item" @onclick="OnDeleteClick" @onclick:stopPropagation="true"><i
                    class="fas fa-trash-alt"></i></button>
        </div>
    }

    <div class="tile-content">
        <div class="tile-icon">
            @if (!string.IsNullOrWhiteSpace(Item.Icon))
            {
                @if (Item.Icon.StartsWith("/") || Item.Icon.StartsWith("http"))
                {
                    <img src="@Item.Icon" alt="@Item.Title" />
                }
                else
                {
                    <i class="@Item.Icon"></i>
                }
            }
        </div>
        <div class="tile-title">@Item.Title</div>
        @if (ViewOptions.CurrentItemSize == ItemSize.Large && !string.IsNullOrWhiteSpace(Description))
        {
            <div class="tile-description">@Description</div>
        }
    </div>
</div>

@code {

    private string? Url => GetOption("url");
    private string? Description => GetOption("Description");
    private string LinkTarget => GetOption("target") ?? "_self";

    protected override void OnInitialized()
    {
        ViewOptions.OnChange += StateHasChanged;
    }

    private void HandleTileClick()
    {
        if (!ViewOptions.IsEditMode && !string.IsNullOrWhiteSpace(Url))
        {
            if (LinkTarget == "_blank")
            {
                _ = JSRuntime.InvokeVoidAsync("open", Url, "_blank");
            }
            else
            {
                NavManager.NavigateTo(Url);
            }
        }
    }

    private string GetTileColorClass()
    {
        // Generate a color based on the item title for consistent colors
        var hash = Item.Title.GetHashCode();
        var colors = new[] { "blue", "green", "purple", "orange", "red", "pink", "teal" };
        return colors[Math.Abs(hash) % colors.Length];
    }

    private async Task OnDeleteClick()
    {
        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", $"Are you sure you want to delete '{Item.Title}'?");
        if (IsDisposed) return;
        if (confirmed)
        {
            await OnItemDeleted.InvokeAsync(Item);
        }
    }

    private async Task OnEditClick()
    {
        await OnItemEdited.InvokeAsync();
    }
}