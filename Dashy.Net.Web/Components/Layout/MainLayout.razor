@using Dashy.Net.Web.Clients
@using Dashy.Net.Web.Components.Editors
@using Dashy.Net.Web.Components.Shared
@using Dashy.Net.Web.Helpers
@using Dashy.Net.Web.Services
@using Dashy.Net.Shared.Models
@using Microsoft.AspNetCore.Components.Authorization
@inherits LayoutComponentBase
@inject ThemeService ThemeService
@inject IJSRuntime JSRuntime
@inject DashboardStateService DashboardState
@inject ViewOptionsService ViewOptions
@inject DashboardClient DashboardClient
@inject AuthenticationStateProvider AuthStateProvider
@inject EventSubscriptionManager SubscriptionManager

@implements IDisposable
<CascadingAuthenticationState>
<div>
    
    <header class="main-header">
        <div class="header-title-section">
            <div style="display: flex; align-items: center; gap: 1rem;">
                <img src="images/dashynet_logo_notext.png" alt="Dashy.NET Logo" class="header-logo" />
                <h1>@(DashboardState.Config?.Title ?? "Dashy.NET")</h1>
                @* <div class="header-search">
                    <SearchBar />
                </div> *@
            </div>
        </div>
        <div class="header-user-section">
            <div class="header-controls">
                <div class="control-group">
                    <span class="control-label">Layout</span>
                    <div class="button-group">
                        <button type="button" 
                                class="control-btn @(IsLayout(LayoutOrientation.Auto) ? "active" : "")" 
                                title="Auto Layout" 
                                @onclick="() => SetLayout(LayoutOrientation.Auto)">
                            <i class="fas fa-th-large"></i>
                        </button>
                        <button type="button" 
                                class="control-btn @(IsLayout(LayoutOrientation.Vertical) ? "active" : "")" 
                                title="Vertical Layout" 
                                @onclick="() => SetLayout(LayoutOrientation.Vertical)">
                            <i class="fas fa-bars"></i>
                        </button>
                    </div>
                </div>
                
                <!-- Item Size Controls -->
                <div class="control-group">
                    <span class="control-label">Size</span>
                    <div class="button-group">
                        <button type="button" 
                                class="control-btn @(IsItemSize(ItemSize.Small) ? "active" : "")" 
                                title="Small Items" 
                                @onclick="() => SetItemSize(ItemSize.Small)">
                            <i class="fas fa-compress"></i>
                        </button>
                        <button type="button" 
                                class="control-btn @(IsItemSize(ItemSize.Medium) ? "active" : "")" 
                                title="Medium Items" 
                                @onclick="() => SetItemSize(ItemSize.Medium)">
                            <i class="fas fa-grip-horizontal"></i>
                        </button>
                        <button type="button" 
                                class="control-btn @(IsItemSize(ItemSize.Large) ? "active" : "")" 
                                title="Large Items" 
                                @onclick="() => SetItemSize(ItemSize.Large)">
                            <i class="fas fa-expand"></i>
                        </button>
                    </div>
                </div>

                <!-- Theme Toggle -->
                <div class="control-group">
                    <ThemeToggleButton IsLightMode="isLightMode" OnToggle="HandleThemeToggle" />
                </div>
            </div>
        </div>
    </header>

    <main class="content">
        @Body
    </main>

    <Modal Title="Manage Header Buttons" IsOpen="@_isButtonManagerOpen" OnClose="CloseButtonManagerModal">
        @if (DashboardState.Config is not null)
        {
            <HeaderButtonManager Buttons="DashboardState.Config.HeaderButtons"
                                 OnAdd="OpenAddButtonEditorModal"
                                 OnEdit="OpenEditButtonEditorModal"
                                 OnDelete="HandleDeleteButton"
                                 OnReorder="HandleReorderButtons" />
        }
    </Modal>

    <Modal Title="@_buttonEditorTitle" IsOpen="@_isButtonEditorOpen" OnClose="CloseButtonEditorModal">
        @if (_buttonToEdit is not null)
        {
            <HeaderButtonEditor EditModel="_buttonToEdit" OnSave="HandleSaveButton" OnCancel="CloseButtonEditorModal" />
        }
    </Modal>

    <Modal Title="Settings" IsOpen="@_isSettingsModalOpen" OnClose="CloseSettingsModal">
        <SettingsModal OnClose="CloseSettingsModal" />
    </Modal>

    <div class="fab-container @(_isFabMenuOpen ? "open" : "")">
        <div class="fab-menu">
            <button class="fab-menu-item" @onclick="OpenSettingsModal">
                <i class="fas fa-user-cog"></i>
                <span class="fab-menu-item-label">User Settings</span>
            </button>
            <button class="fab-menu-item" @onclick="OpenSettingsModal">
                <i class="fas fa-palette"></i>
                <span class="fab-menu-item-label">App Settings</span>
            </button>
            <button class="fab-menu-item" @onclick="ToggleEditMode">
                <i class="fas fa-pencil-alt"></i>
                <span class="fab-menu-item-label">Toggle Edit Mode</span>
            </button>
        </div>
        <button class="fab-main-button" @onclick="ToggleFabMenu" title="Open Settings">
            <i class="fas @(_isFabMenuOpen ? "fa-times" : "fa-cog")"></i>
        </button>
    </div>

    <footer class="dashboard-footer" style="position: fixed; left:0;bottom:0;width:100%;text-align:center;">
        <div>
            <strong>Version:</strong> 0.1.1 &nbsp;|&nbsp;
            <strong>License:</strong> GNU Affero General Public License &nbsp;|&nbsp;
            <strong>Disclaimer:</strong> This is a pre-release version. Features and functionality may change or be missing.
        </div>
    </footer>
</div>
</CascadingAuthenticationState>
@code {
    private bool isLightMode = false;

    private bool _isAuthConfigured = false;
    private bool _isButtonManagerOpen = false;
    private bool _isButtonEditorOpen = false;
    private string _buttonEditorTitle = "";
    private HeaderButtonEditor.ButtonEditModel? _buttonToEdit;
    private int _editingButtonId = 0;

    private bool _isFabMenuOpen = false;
    private bool _isSettingsModalOpen = false;

    private bool _disposed = false;
    AuthenticationState authState = default;

    protected override async Task OnInitializedAsync()
    {
        ThemeService.OnThemeChanged += OnThemeChangedHandler;
        DashboardState.OnConfigLoaded += StateHasChanged;
        ViewOptions.OnChange += HandleOptionsChanged;
        _isAuthConfigured = !string.IsNullOrWhiteSpace(Environment.GetEnvironmentVariable("auth_authority")) &&
                            !string.IsNullOrWhiteSpace(Environment.GetEnvironmentVariable("auth_clientid")) &&
                            !string.IsNullOrWhiteSpace(Environment.GetEnvironmentVariable("auth_clientsecret"));
        authState = await AuthStateProvider.GetAuthenticationStateAsync();

    }

    protected override void OnInitialized()
    {
        SubscriptionManager.AddSubscription(() => ThemeService.OnThemeChanged -= OnThemeChangedHandler);
        SubscriptionManager.AddSubscription(() => DashboardState.OnConfigLoaded -= StateHasChanged);
        SubscriptionManager.AddSubscription(() => ViewOptions.OnChange -= HandleOptionsChanged);

        ThemeService.OnThemeChanged += OnThemeChangedHandler;
        DashboardState.OnConfigLoaded += StateHasChanged;
        ViewOptions.OnChange += HandleOptionsChanged;
    }

    private void HandleOptionsChanged()
    {
        InvokeAsync(StateHasChanged);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            if (_disposed) return;
            var savedThemeClass = await JSRuntime.InvokeAsync<string?>("getFromLocalStorage", "dashy-theme");
            var initialThemeClass = savedThemeClass ?? ThemeService.CurrentTheme.CssClass;
            ThemeService.SetCurrentThemeWithoutNotification(initialThemeClass);
            OnThemeChangedHandler();
        }
    }

    private async Task ReloadDashboard()
    {
        if (_disposed) return;
        var config = await DashboardClient.GetConfigAsync();
        if (_disposed) return;
        DashboardState.SetConfig(config);
    }

    private void OpenButtonManagerModal() => _isButtonManagerOpen = true;
    private void CloseButtonManagerModal() => _isButtonManagerOpen = false;

    private void OpenSettingsModal()
    {
        Console.WriteLine("OpenSettingsModal triggered");
        Console.WriteLine($"_isSettingsModalOpen: {_isSettingsModalOpen}");
        _isSettingsModalOpen = true;
        _isFabMenuOpen = false;
    }

    private void CloseSettingsModal() => _isSettingsModalOpen = false;

    private void OpenAddButtonEditorModal()
    {
        _editingButtonId = 0;
        _buttonEditorTitle = "Add New Header Button";
        _buttonToEdit = new();
        _isButtonEditorOpen = true;
    }

    private void OpenEditButtonEditorModal(HeaderButtonVm button)
    {
        _editingButtonId = button.Id;
        _buttonEditorTitle = $"Edit '{button.Text}'";
        _buttonToEdit = new() { Text = button.Text, Url = button.Url, Icon = button.Icon };
        _isButtonEditorOpen = true;
    }

    private void CloseButtonEditorModal()
    {
        _isButtonEditorOpen = false;
        _buttonToEdit = null;
        _editingButtonId = 0;
    }

    private async Task HandleSaveButton(HeaderButtonEditor.ButtonEditModel model)
    {
        if (_disposed) return;
        bool success;
        if (_editingButtonId > 0)
        {
            var dto = new UpdateHeaderButtonDto
            {
                Text = model.Text,
                Url = model.Url ?? string.Empty,
                Icon = model.Icon
            };
            success = await DashboardClient.HeaderButtons.UpdateAsync(_editingButtonId, dto);
        }
        else if (DashboardState.Config is not null)
        {
            var dto = new CreateHeaderButtonDto
            {
                Text = model.Text,
                Url = model.Url ?? string.Empty,
                Icon = model.Icon,
                DashboardId = DashboardState.Config.Id
            };
            success = await DashboardClient.HeaderButtons.CreateAsync(dto);
        }
        else { success = false; }

        if (_disposed) return;
        if (success)
        {
            await ReloadDashboard();
        }
        CloseButtonEditorModal();
    }

    private async Task HandleDeleteButton(HeaderButtonVm button)
    {
        if (_disposed) return;
        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", $"Are you sure you want to delete the '{button.Text}' button?");
        if (_disposed || !confirmed) return;
        var success = await DashboardClient.HeaderButtons.DeleteAsync(button.Id);
        if (_disposed) return;
        if (success) await ReloadDashboard();
    }

    private async Task HandleReorderButtons(List<int> orderedIds)
    {
        if (_disposed) return;
        var dto = new ReorderHeaderButtonsDto(orderedIds);
        var success = await DashboardClient.HeaderButtons.ReorderAsync(dto);
        if (_disposed) return;
        if (!success) await ReloadDashboard();
    }

    private async Task HandleThemeToggle()
    {
        if (_disposed) return;
        var newThemeClass = ThemeService.CurrentTheme.CssClass == "theme-dark" ? "theme-light" : "theme-dark";
        try
        {
            await JSRuntime.InvokeVoidAsync("saveToLocalStorage", "dashy-theme", newThemeClass);
            ThemeService.SetTheme(newThemeClass);
        }
        catch (ObjectDisposedException) { /* Circuit disposed, ignore */ }
        catch (InvalidOperationException) { /* Circuit disposed, ignore */ }
    }

    private void OnThemeChangedHandler()
    {
        if (_disposed) return;
        InvokeAsync(async () =>
        {
            if (_disposed) return;
            isLightMode = ThemeService.CurrentTheme.CssClass == "theme-light";
            try
            {
                await JSRuntime.InvokeVoidAsync("setBodyClass", ThemeService.CurrentTheme.CssClass);
            }
            catch (ObjectDisposedException) { /* Circuit disposed, ignore */ }
            catch (InvalidOperationException) { /* Circuit disposed, ignore */ }
            StateHasChanged();
        });
    }

    private bool IsLayout(LayoutOrientation layout) => ViewOptions.CurrentLayout == layout;
    private void SetLayout(LayoutOrientation layout) => ViewOptions.SetLayout(layout);
    private bool IsItemSize(ItemSize size) => ViewOptions.CurrentItemSize == size;
    private void SetItemSize(ItemSize size) => ViewOptions.SetItemSize(size);

    private void ToggleFabMenu()
    {
        _isFabMenuOpen = !_isFabMenuOpen;
    }

    private void ToggleEditMode()
    {
        ViewOptions.ToggleEditMode();
        _isFabMenuOpen = false;
    }

    private void Login()
    {
        NavigationManager.NavigateTo("authentication/login", true);
    }

    private void Logout()
    {
        NavigationManager.NavigateTo("authentication/logout", true);
    }

    [Inject] private NavigationManager NavigationManager { get; set; } = default!;

    public void Dispose()
    {
        SubscriptionManager.Dispose();
        _disposed = true;
        ThemeService.OnThemeChanged -= OnThemeChangedHandler;
        DashboardState.OnConfigLoaded -= StateHasChanged;
        ViewOptions.OnChange -= HandleOptionsChanged;
    }
}
