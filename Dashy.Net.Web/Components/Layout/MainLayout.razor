@using Dashy.Net.Web.Clients
@using Dashy.Net.Web.Components.Editors
@using Dashy.Net.Web.Components.Shared
@using Dashy.Net.Web.Helpers
@using Dashy.Net.Web.Services
@using Dashy.Net.Shared.Models
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.JSInterop
@using System.ComponentModel.DataAnnotations
@inherits LayoutComponentBase
@inject ThemeService ThemeService
@inject IJSRuntime JSRuntime
@inject DashboardStateService DashboardState
@inject ViewOptionsService ViewOptions
@inject DashboardClient DashboardClient
@inject AuthenticationStateProvider AuthStateProvider
@inject EventSubscriptionManager SubscriptionManager
@inject IVersionService VersionService
@inject FileStorageService FileStorageService
@inject ClientStorageService ClientStorageService

@implements IDisposable
<CascadingAuthenticationState>
<div class="dashboard-layout @(_isHeaderVisible ? "" : "header-hidden")">
    
    @if (_isHeaderVisible)
    {
        <header class="main-header">
        <div class="header-title-section">
            <div style="display: flex; align-items: center; gap: 1rem;">
                <img src="images/dashynet_logo_notext.png" alt="Dashy.NET Logo" class="header-logo" />
                <div class="dashboard-title-dropdown" id="dashboard-title-dropdown">
                    <button class="dropdown-btn" @onclick="ToggleDashboardDropdown" @onclick:stopPropagation="true">
                        <h1 style="margin: 0; display: inline;">@(DashboardState.Config?.Title ?? "Dashy.NET")</h1>
                        <i class="fas fa-chevron-down dropdown-arrow @(_isDashboardDropdownOpen ? "open" : "")"></i>
                    </button>
                    @if (_isDashboardDropdownOpen)
                    {
                        <div class="dropdown-menu">
                            @if (_availableDashboards != null && _availableDashboards.Any())
                            {
                                @foreach (var dashboard in _availableDashboards)
                                {
                                    <div class="dropdown-item @(dashboard.Id == DashboardState.Config?.Id ? "active" : "")" 
                                         @onclick="() => NavigateToDashboard(dashboard.Id)">
                                        <div class="dashboard-title">@dashboard.Title</div>
                                        @if (!string.IsNullOrWhiteSpace(dashboard.Subtitle))
                                        {
                                            <div class="dashboard-subtitle">@dashboard.Subtitle</div>
                                        }
                                    </div>
                                }
                            }
                            else
                            {
                                <div class="dropdown-item disabled">No dashboards available</div>
                            }
                        </div>
                    }
                </div>
                @* <div class="header-search">
                    <SearchBar />
                </div> *@
            </div>
        </div>
        <div class="header-user-section">
            <div class="header-controls">
                <div class="control-group">
                    <span class="control-label">Layout</span>
                    <div class="button-group">
                        <button type="button" 
                                class="control-btn @(IsLayout(LayoutOrientation.Auto) ? "active" : "")" 
                                title="Auto Layout" 
                                @onclick="() => SetLayout(LayoutOrientation.Auto)">
                            <i class="fas fa-th-large"></i>
                        </button>
                        <button type="button" 
                                class="control-btn @(IsLayout(LayoutOrientation.Vertical) ? "active" : "")" 
                                title="Vertical Layout" 
                                @onclick="() => SetLayout(LayoutOrientation.Vertical)">
                            <i class="fas fa-bars"></i>
                        </button>
                    </div>
                </div>
                
                <!-- Item Size Controls -->
                <div class="control-group">
                    <span class="control-label">Size</span>
                    <div class="button-group">
                        <button type="button" 
                                class="control-btn @(IsItemSize(ItemSize.Small) ? "active" : "")" 
                                title="Small Items" 
                                @onclick="() => SetItemSize(ItemSize.Small)">
                            <i class="fas fa-compress"></i>
                        </button>
                        <button type="button" 
                                class="control-btn @(IsItemSize(ItemSize.Medium) ? "active" : "")" 
                                title="Medium Items" 
                                @onclick="() => SetItemSize(ItemSize.Medium)">
                            <i class="fas fa-grip-horizontal"></i>
                        </button>
                        <button type="button" 
                                class="control-btn @(IsItemSize(ItemSize.Large) ? "active" : "")" 
                                title="Large Items" 
                                @onclick="() => SetItemSize(ItemSize.Large)">
                            <i class="fas fa-expand"></i>
                        </button>
                    </div>
                </div>
                <div class="control-group">
                    <ThemeToggleButton IsLightMode="isLightMode" OnToggle="HandleThemeToggle" />
                </div>
            </div>
        </div>
    </header>
    }

    <!-- Hidden Header Logo for Wallboard Mode -->
    @if (!_isHeaderVisible)
    {
        <div class="wallboard-logo">
            <img src="images/dashynet_logo_notext.png" alt="Dashy.NET Logo" />
        </div>
    }

    <main class="content">
        @Body
    </main>

    <Modal Title="Manage Header Buttons" IsOpen="@_isButtonManagerOpen" OnClose="CloseButtonManagerModal">
        @if (DashboardState.Config is not null)
        {
            <HeaderButtonManager Buttons="DashboardState.Config.HeaderButtons"
                                 OnAdd="OpenAddButtonEditorModal"
                                 OnEdit="OpenEditButtonEditorModal"
                                 OnDelete="HandleDeleteButton"
                                 OnReorder="HandleReorderButtons" />
        }
    </Modal>

    <Modal Title="@_buttonEditorTitle" IsOpen="@_isButtonEditorOpen" OnClose="CloseButtonEditorModal">
        @if (_buttonToEdit is not null)
        {
            <HeaderButtonEditor EditModel="_buttonToEdit" OnSave="HandleSaveButton" OnCancel="CloseButtonEditorModal" />
        }
    </Modal>

    <Modal Title="Settings" IsOpen="@_isSettingsModalOpen" OnClose="CloseSettingsModal">
        <SettingsModal OnClose="CloseSettingsModal" />
    </Modal>

    <Modal Title="Create New Dashboard" IsOpen="@_isCreateDashboardModalOpen" OnClose="CloseCreateDashboardModal">
        @if (_newDashboard is not null)
        {
            <EditForm Model="_newDashboard" OnValidSubmit="HandleCreateDashboard">
                <DataAnnotationsValidator />
                <div class="form-group">
                    <label for="new-dashboard-title">Dashboard Title</label>
                    <InputText id="new-dashboard-title" class="form-control" @bind-Value="_newDashboard.Title" />
                    <ValidationMessage For="@(() => _newDashboard.Title)" />
                </div>

                <div class="form-group">
                    <label for="new-dashboard-subtitle">Dashboard Subtitle</label>
                    <InputText id="new-dashboard-subtitle" class="form-control" @bind-Value="_newDashboard.Subtitle" />
                    <small class="form-text">Optional subtitle displayed below the main title</small>
                </div>

                <div class="form-actions">
                    <button type="button" class="btn btn-secondary" @onclick="CloseCreateDashboardModal">Cancel</button>
                    <button type="submit" class="btn btn-primary" disabled="@_isCreatingDashboard">
                        @if (_isCreatingDashboard)
                        {
                            <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                            <span>Creating...</span>
                        }
                        else
                        {
                            <span>Create Dashboard</span>
                        }
                    </button>
                </div>
            </EditForm>
        }
    </Modal>

    <Modal Title="Upload Custom Logo" IsOpen="@_isCustomLogoModalOpen" OnClose="CloseCustomLogoModal">
        <div class="form-group">
            <label for="logo-upload">Choose Logo Image</label>
            <InputFile id="logo-upload" class="form-control" OnChange="HandleLogoFileSelected" accept=".png,.jpg,.jpeg,.gif" />
            <small class="form-text text-muted">Accepted formats: PNG, JPG, GIF (max 10MB)</small>
        </div>
        
        @if (!string.IsNullOrEmpty(_logoUploadError))
        {
            <div class="alert alert-danger">
                @_logoUploadError
            </div>
        }
        
        @if (!string.IsNullOrEmpty(_selectedLogoPreview))
        {
            <div class="form-group">
                <label>Preview:</label>
                <div style="text-align: center;">
                    <img src="@_selectedLogoPreview" alt="Logo Preview" style=" border: 1px solid #ddd; border-radius: 4px;" />
                </div>
            </div>
        }
        
        <div class="form-actions">
            <button type="button" class="btn btn-secondary" @onclick="CloseCustomLogoModal">Cancel</button>
            @if (_selectedLogoFile != null)
            {
                <button type="button" class="btn btn-primary" @onclick="SaveCustomLogo" disabled="@_isUploadingLogo">
                    @if (_isUploadingLogo)
                    {
                        <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                        <span>Uploading...</span>
                    }
                    else
                    {
                        <span>Save Logo</span>
                    }
                </button>
            }
            @if (!string.IsNullOrEmpty(_customLogoPath))
            {
                <button type="button" class="btn btn-danger" @onclick="RemoveCustomLogo">Remove Current Logo</button>
            }
        </div>
    </Modal>

    <Modal Title="Upload Background Image" IsOpen="@_isBackgroundUploadModalOpen" OnClose="CloseBackgroundUploadModal">
        <div class="form-group">
            <label for="background-upload">Choose Background Image</label>
            <InputFile id="background-upload" class="form-control" OnChange="HandleBackgroundFileSelected" accept=".png,.jpg,.jpeg,.gif" />
            <small class="form-text text-muted">Accepted formats: PNG, JPG, GIF (max 10MB). Recommended: 1920x1080 or higher resolution</small>
        </div>
        
        @if (!string.IsNullOrEmpty(_backgroundUploadError))
        {
            <div class="alert alert-danger">
                @_backgroundUploadError
            </div>
        }
        
        @if (!string.IsNullOrEmpty(_selectedBackgroundPreview))
        {
            <div class="form-group">
                <label>Preview:</label>
                <div style="text-align: center;">
                    <img src="@_selectedBackgroundPreview" alt="Background Preview" style="max-width: 300px; max-height: 200px; object-fit: cover; border: 1px solid #ddd; border-radius: 4px;" />
                </div>
            </div>
        }
        
        <div class="form-actions">
            <button type="button" class="btn btn-secondary" @onclick="CloseBackgroundUploadModal">Cancel</button>
            @if (_selectedBackgroundFile != null)
            {
                <button type="button" class="btn btn-primary" @onclick="SaveCustomBackground" disabled="@_isUploadingBackground">
                    @if (_isUploadingBackground)
                    {
                        <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                        <span>Uploading...</span>
                    }
                    else
                    {
                        <span>Save Background</span>
                    }
                </button>
            }
            @if (!string.IsNullOrEmpty(_customBackgroundPath))
            {
                <button type="button" class="btn btn-danger" @onclick="RemoveCustomBackground">Remove Current Background</button>
            }
        </div>
    </Modal>

    <div class="fab-container @(_isFabMenuOpen ? "open" : "")">
        @if(_isFabMenuOpen)
        {
            <div class="fab-menu">
                <button class="fab-menu-item" @onclick="OpenCreateDashboardModal">
                    <i class="fas fa-plus"></i>
                    <span class="fab-menu-item-label">New Dashboard</span>
                </button>
                <button class="fab-menu-item" @onclick="OpenCustomLogoModal">
                    <i class="fas fa-image"></i>
                    <span class="fab-menu-item-label">Upload Logo</span>
                </button>
                <button class="fab-menu-item" @onclick="OpenBackgroundUploadModal">
                    <i class="fas fa-mountain"></i>
                    <span class="fab-menu-item-label">Background Image</span>
                </button>
                <button class="fab-menu-item" @onclick="ToggleHeaderVisibility">
                    <i class="fas @(_isHeaderVisible ? "fa-eye-slash" : "fa-eye")"></i>
                    <span class="fab-menu-item-label">@(_isHeaderVisible ? "Hide Header" : "Show Header")</span>
                </button>
                <button class="fab-menu-item" @onclick="OpenSettingsModal">
                    <i class="fas fa-user-cog"></i>
                    <span class="fab-menu-item-label">User Settings</span>
                </button>
                <button class="fab-menu-item" @onclick="OpenSettingsModal">
                    <i class="fas fa-palette"></i>
                    <span class="fab-menu-item-label">App Settings</span>
                </button>
                <button class="fab-menu-item" @onclick="ToggleEditMode">
                    <i class="fas fa-pencil-alt"></i>
                    <span class="fab-menu-item-label">Toggle Edit Mode</span>
                </button>
            </div>

        }
        <button class="fab-main-button" @onclick="ToggleFabMenu" title="Open Settings">
            <i class="fas @(_isFabMenuOpen ? "fa-times" : "fa-cog")"></i>
        </button>
    </div>

    <!-- Custom Logo in Bottom Left Corner -->
    @if (!string.IsNullOrEmpty(_customLogoPath))
    {
        <div class="custom-logo-container">
            <img src="@_customLogoPath" alt="Custom Logo" class="custom-logo" @onclick="OpenCustomLogoModal" title="Click to change logo" />
        </div>
    }

    <footer class="dashboard-footer" style="position: fixed; left:0;bottom:0;width:100%;text-align:center;">>
        <div>
            <strong>Version:</strong> @VersionService.GetVersion() &nbsp;|&nbsp;
            <strong>License:</strong> GNU Affero General Public License &nbsp;|&nbsp;
            @if (VersionService.IsPreRelease())
            {
                <strong>Disclaimer:</strong> <span>This is a pre-release version. Features and functionality may change or be missing.</span>
            }
        </div>
    </footer>
</div>
</CascadingAuthenticationState>
@code {
    private bool isLightMode = false;

    private bool _isAuthConfigured = false;
    private bool _isButtonManagerOpen = false;
    private bool _isButtonEditorOpen = false;
    private string _buttonEditorTitle = "";
    private HeaderButtonEditor.ButtonEditModel? _buttonToEdit;
    private int _editingButtonId = 0;

    private bool _isFabMenuOpen = false;
    private bool _isSettingsModalOpen = false;

    private bool _isCreateDashboardModalOpen = false;
    private bool _isCreatingDashboard = false;
    private CreateDashboardDto? _newDashboard;

    private bool _isDashboardDropdownOpen = false;
    private IEnumerable<DashboardListItemVm>? _availableDashboards;

    private bool _disposed = false;
    AuthenticationState? authState = null;

    // Header visibility for wallboard mode
    private bool _isHeaderVisible = true;

    // Custom logo fields
    private bool _isCustomLogoModalOpen = false;
    private bool _isUploadingLogo = false;
    private string? _customLogoPath;
    private IBrowserFile? _selectedLogoFile;
    private string? _selectedLogoPreview;
    private string? _logoUploadError;

    // Background image fields
    private bool _isBackgroundUploadModalOpen = false;
    private bool _isUploadingBackground = false;
    private string? _customBackgroundPath;
    private IBrowserFile? _selectedBackgroundFile;
    private string? _selectedBackgroundPreview;
    private string? _backgroundUploadError;

    protected override async Task OnInitializedAsync()
    {
        ThemeService.OnThemeChanged += OnThemeChangedHandler;
        DashboardState.OnConfigLoaded += OnConfigLoadedHandler;
        ViewOptions.OnChange += HandleOptionsChanged;
        _isAuthConfigured = !string.IsNullOrWhiteSpace(Environment.GetEnvironmentVariable("auth_authority")) &&
                            !string.IsNullOrWhiteSpace(Environment.GetEnvironmentVariable("auth_clientid")) &&
                            !string.IsNullOrWhiteSpace(Environment.GetEnvironmentVariable("auth_clientsecret"));
        authState = await AuthStateProvider.GetAuthenticationStateAsync();

        // Load custom logo from storage
        _customLogoPath = await ClientStorageService.GetItemAsync<string>("custom_logo_path");
        
        // Load header visibility state
        _isHeaderVisible = await ClientStorageService.GetItemAsync<bool?>("header_visible") ?? true;
        
        // Load custom background from storage
        _customBackgroundPath = await ClientStorageService.GetItemAsync<string>("custom_background_path");
        if (!string.IsNullOrEmpty(_customBackgroundPath))
        {
            await ApplyBackgroundImage();
        }
    }

    protected override void OnInitialized()
    {
        SubscriptionManager.AddSubscription(() => ThemeService.OnThemeChanged -= OnThemeChangedHandler);
        SubscriptionManager.AddSubscription(() => DashboardState.OnConfigLoaded -= OnConfigLoadedHandler);
        SubscriptionManager.AddSubscription(() => ViewOptions.OnChange -= HandleOptionsChanged);

        ThemeService.OnThemeChanged += OnThemeChangedHandler;
        DashboardState.OnConfigLoaded += OnConfigLoadedHandler;
        ViewOptions.OnChange += HandleOptionsChanged;
    }

    private void HandleOptionsChanged()
    {
        InvokeAsync(StateHasChanged);
    }

    private void OnConfigLoadedHandler()
    {
        InvokeAsync(async () => {
            StateHasChanged();
            if (_availableDashboards == null)
            {
                await LoadAvailableDashboards();
            }
        });
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            if (_disposed) return;
            var savedThemeClass = await JSRuntime.InvokeAsync<string?>("getFromLocalStorage", "dashy-theme");
            var initialThemeClass = savedThemeClass ?? ThemeService.CurrentTheme.CssClass;
            ThemeService.SetCurrentThemeWithoutNotification(initialThemeClass);
            OnThemeChangedHandler();
            
            await JSRuntime.InvokeVoidAsync("addClickOutsideHandler", "dashboard-title-dropdown", DotNetObjectReference.Create(this));
            
            // Apply background image after first render when DOM is ready
            if (!string.IsNullOrEmpty(_customBackgroundPath))
            {
                await ApplyBackgroundImage();
            }
        }
    }

    private async Task ReloadDashboard()
    {
        if (_disposed) return;
        var config = await DashboardClient.GetConfigAsync();
        if (_disposed) return;
        await InvokeAsync(() => DashboardState.SetConfig(config));
    }

    private async Task LoadAvailableDashboards()
    {
        if (_disposed) return;
        _availableDashboards = await DashboardClient.GetAllAsync();
        Console.WriteLine($"Loaded {_availableDashboards?.Count() ?? 0} dashboards for dropdown");
        StateHasChanged();
    }

    private async Task ToggleDashboardDropdown()
    {
        if (_disposed) return;
        _isDashboardDropdownOpen = !_isDashboardDropdownOpen;
        if (_isDashboardDropdownOpen && _availableDashboards == null)
        {
            await LoadAvailableDashboards();
        }
        StateHasChanged();
    }

    private void NavigateToDashboard(int dashboardId)
    {
        _isDashboardDropdownOpen = false;
        NavigationManager.NavigateTo($"/dashboard/{dashboardId}");
    }

    [JSInvokable]
    public void CloseDropdown()
    {
        _isDashboardDropdownOpen = false;
        InvokeAsync(StateHasChanged);
    }

    private void OpenButtonManagerModal() => _isButtonManagerOpen = true;
    private void CloseButtonManagerModal() => _isButtonManagerOpen = false;

    private void OpenSettingsModal()
    {
        Console.WriteLine("OpenSettingsModal triggered");
        Console.WriteLine($"_isSettingsModalOpen: {_isSettingsModalOpen}");
        _isSettingsModalOpen = true;
        _isFabMenuOpen = false;
    }

    private void CloseSettingsModal() => _isSettingsModalOpen = false;

    private void OpenAddButtonEditorModal()
    {
        _editingButtonId = 0;
        _buttonEditorTitle = "Add New Header Button";
        _buttonToEdit = new();
        _isButtonEditorOpen = true;
    }

    private void OpenEditButtonEditorModal(HeaderButtonVm button)
    {
        _editingButtonId = button.Id;
        _buttonEditorTitle = $"Edit '{button.Text}'";
        _buttonToEdit = new() { Text = button.Text, Url = button.Url, Icon = button.Icon };
        _isButtonEditorOpen = true;
    }

    private void CloseButtonEditorModal()
    {
        _isButtonEditorOpen = false;
        _buttonToEdit = null;
        _editingButtonId = 0;
    }

    private async Task HandleSaveButton(HeaderButtonEditor.ButtonEditModel model)
    {
        if (_disposed) return;
        bool success;
        if (_editingButtonId > 0)
        {
            var dto = new UpdateHeaderButtonDto
            {
                Text = model.Text,
                Url = model.Url ?? string.Empty,
                Icon = model.Icon
            };
            success = await DashboardClient.HeaderButtons.UpdateAsync(_editingButtonId, dto);
        }
        else if (DashboardState.Config is not null)
        {
            var dto = new CreateHeaderButtonDto
            {
                Text = model.Text,
                Url = model.Url ?? string.Empty,
                Icon = model.Icon,
                DashboardId = DashboardState.Config.Id
            };
            success = await DashboardClient.HeaderButtons.CreateAsync(dto);
        }
        else { success = false; }

        if (_disposed) return;
        if (success)
        {
            await ReloadDashboard();
        }
        CloseButtonEditorModal();
    }

    private async Task HandleDeleteButton(HeaderButtonVm button)
    {
        if (_disposed) return;
        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", $"Are you sure you want to delete the '{button.Text}' button?");
        if (_disposed || !confirmed) return;
        var success = await DashboardClient.HeaderButtons.DeleteAsync(button.Id);
        if (_disposed) return;
        if (success) await ReloadDashboard();
    }

    private async Task HandleReorderButtons(List<int> orderedIds)
    {
        if (_disposed) return;
        var dto = new ReorderHeaderButtonsDto(orderedIds);
        var success = await DashboardClient.HeaderButtons.ReorderAsync(dto);
        if (_disposed) return;
        if (!success) await ReloadDashboard();
    }

    private async Task HandleThemeToggle()
    {
        if (_disposed) return;
        var newThemeClass = ThemeService.CurrentTheme.CssClass == "theme-dark" ? "theme-light" : "theme-dark";
        try
        {
            await JSRuntime.InvokeVoidAsync("saveToLocalStorage", "dashy-theme", newThemeClass);
            ThemeService.SetTheme(newThemeClass);
        }
        catch (ObjectDisposedException) {  }
        catch (InvalidOperationException) { }
    }

    private void OnThemeChangedHandler()
    {
        if (_disposed) return;
        InvokeAsync(async () =>
        {
            if (_disposed) return;
            isLightMode = ThemeService.CurrentTheme.CssClass == "theme-light";
            try
            {
                await JSRuntime.InvokeVoidAsync("setBodyClass", ThemeService.CurrentTheme.CssClass);
            }
            catch (ObjectDisposedException) { }
            catch (InvalidOperationException) {  }
            StateHasChanged();
        });
    }

    private bool IsLayout(LayoutOrientation layout) => ViewOptions.CurrentLayout == layout;
    private void SetLayout(LayoutOrientation layout) => ViewOptions.SetLayout(layout);
    private bool IsItemSize(ItemSize size) => ViewOptions.CurrentItemSize == size;
    private void SetItemSize(ItemSize size) => ViewOptions.SetItemSize(size);

    private void ToggleFabMenu()
    {
        _isFabMenuOpen = !_isFabMenuOpen;
    }

    private async Task ToggleHeaderVisibility()
    {
        _isHeaderVisible = !_isHeaderVisible;
        await ClientStorageService.SetItemAsync("header_visible", _isHeaderVisible);
        _isFabMenuOpen = false;
        StateHasChanged();
    }

    private async Task ToggleEditMode()
    {
        await ViewOptions.TryToggleEditModeAsync();
        _isFabMenuOpen = false;
    }

    private void Login()
    {
        NavigationManager.NavigateTo("authentication/login", true);
    }

    private void Logout()
    {
        NavigationManager.NavigateTo("authentication/logout", true);
    }

    private void OpenCreateDashboardModal()
    {
        _newDashboard = new CreateDashboardDto();
        _isCreateDashboardModalOpen = true;
        _isFabMenuOpen = false;
    }

    private void CloseCreateDashboardModal()
    {
        _isCreateDashboardModalOpen = false;
        _newDashboard = null;
        _isCreatingDashboard = false;
    }

    private async Task HandleCreateDashboard()
    {
        if (_newDashboard is null) return;

        _isCreatingDashboard = true;
        StateHasChanged();

        try
        {
            var result = await DashboardClient.CreateAsync(_newDashboard);
            if (_disposed) return;

            if (result is not null)
            {
                NavigationManager.NavigateTo($"/dashboard/{result.Id}");
                CloseCreateDashboardModal();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error creating dashboard: {ex.Message}");
        }
        finally
        {
            if (!_disposed)
            {
                _isCreatingDashboard = false;
                StateHasChanged();
            }
        }
    }

    // Custom Logo Methods
    private void OpenCustomLogoModal()
    {
        _isCustomLogoModalOpen = true;
        _selectedLogoFile = null;
        _selectedLogoPreview = null;
        _isFabMenuOpen = false; // Close FAB menu when opening logo modal
    }

    private void CloseCustomLogoModal()
    {
        _isCustomLogoModalOpen = false;
        _selectedLogoFile = null;
        _selectedLogoPreview = null;
        _isUploadingLogo = false;
        _logoUploadError = null;
    }

    private async Task HandleLogoFileSelected(InputFileChangeEventArgs e)
    {
        _selectedLogoFile = e.File;
        _logoUploadError = null;
        
        if (_selectedLogoFile != null)
        {
            // Create preview
            try
            {
                const int maxPreviewSize = 1024 * 1024; // 1MB for preview
                using var stream = _selectedLogoFile.OpenReadStream(maxPreviewSize);
                var buffer = new byte[stream.Length];
                await stream.ReadAsync(buffer);
                var base64 = Convert.ToBase64String(buffer);
                _selectedLogoPreview = $"data:{_selectedLogoFile.ContentType};base64,{base64}";
                StateHasChanged();
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error creating preview: {ex.Message}");
                _selectedLogoPreview = null;
                _logoUploadError = "Error creating preview. Please try a different file.";
            }
        }
        else
        {
            _selectedLogoPreview = null;
        }
        StateHasChanged();
    }

    private async Task SaveCustomLogo()
    {
        if (_selectedLogoFile == null || _disposed) return;

        _isUploadingLogo = true;
        _logoUploadError = null;
        StateHasChanged();

        try
        {
            var logoUrl = await FileStorageService.SaveImageAsync(_selectedLogoFile);
            if (_disposed) return;

            if (!string.IsNullOrEmpty(logoUrl))
            {
                _customLogoPath = logoUrl;
                await ClientStorageService.SetItemAsync("custom_logo_path", _customLogoPath);
                CloseCustomLogoModal();
            }
            else
            {
                _logoUploadError = "Failed to upload logo. Please check the file format and try again.";
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error uploading logo: {ex.Message}");
            _logoUploadError = $"Upload error: {ex.Message}";
        }
        finally
        {
            if (!_disposed)
            {
                _isUploadingLogo = false;
                StateHasChanged();
            }
        }
    }

    private async Task RemoveCustomLogo()
    {
        if (_disposed) return;
        
        _customLogoPath = null;
        await ClientStorageService.RemoveItemAsync("custom_logo_path");
        CloseCustomLogoModal();
        StateHasChanged();
    }

    // Background Image Methods
    private async Task ApplyBackgroundImage()
    {
        if (_disposed || string.IsNullOrEmpty(_customBackgroundPath)) return;
        try
        {
            Console.WriteLine($"ApplyBackgroundImage called with path: {_customBackgroundPath}");
            await JSRuntime.InvokeVoidAsync("setCustomBackground", _customBackgroundPath);
            Console.WriteLine("JavaScript setCustomBackground called successfully");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error applying background image: {ex.Message}");
        }
    }

    private void OpenBackgroundUploadModal()
    {
        _isBackgroundUploadModalOpen = true;
        _selectedBackgroundFile = null;
        _selectedBackgroundPreview = null;
        _backgroundUploadError = null;
        _isFabMenuOpen = false;
    }

    private void CloseBackgroundUploadModal()
    {
        _isBackgroundUploadModalOpen = false;
        _selectedBackgroundFile = null;
        _selectedBackgroundPreview = null;
        _backgroundUploadError = null;
        _isUploadingBackground = false;
    }

    private async Task HandleBackgroundFileSelected(InputFileChangeEventArgs e)
    {
        _selectedBackgroundFile = e.File;
        _backgroundUploadError = null;
        
        if (_selectedBackgroundFile != null)
        {
            // Validate file first
            var allowedTypes = new[] { "image/png", "image/jpeg", "image/jpg", "image/gif" };
            if (!allowedTypes.Contains(_selectedBackgroundFile.ContentType.ToLower()))
            {
                _backgroundUploadError = "Invalid file type. Please use PNG, JPG, or GIF images.";
                _selectedBackgroundFile = null;
                StateHasChanged();
                return;
            }

            // Check file size (10MB limit)
            const long maxFileSize = 10 * 1024 * 1024; // 10MB
            if (_selectedBackgroundFile.Size > maxFileSize)
            {
                _backgroundUploadError = "File is too large. Maximum size is 10MB.";
                _selectedBackgroundFile = null;
                StateHasChanged();
                return;
            }

            // Create preview for smaller files
            try
            {
                // Use a smaller preview size for better performance
                const int maxPreviewSize = 512 * 1024; // 512KB for preview
                
                if (_selectedBackgroundFile.Size <= maxPreviewSize)
                {
                    using var stream = _selectedBackgroundFile.OpenReadStream(maxPreviewSize);
                    var buffer = new byte[stream.Length];
                    await stream.ReadAsync(buffer);
                    if (_disposed) return;
                    var base64 = Convert.ToBase64String(buffer);
                    _selectedBackgroundPreview = $"data:{_selectedBackgroundFile.ContentType};base64,{base64}";
                }
                else
                {
                    // For larger files, show a placeholder message instead of trying to create preview
                    _selectedBackgroundPreview = null;
                    Console.WriteLine($"File too large for preview: {_selectedBackgroundFile.Size} bytes. Preview skipped.");
                }
                StateHasChanged();
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error creating background preview: {ex.Message}");
                _selectedBackgroundPreview = null;
                // Don't show error for preview failure if file is valid
                if (_selectedBackgroundFile.Size <= 512 * 1024)
                {
                    _backgroundUploadError = $"Error creating preview: {ex.Message}. You can still upload the file.";
                }
                StateHasChanged();
            }
        }
        else
        {
            _selectedBackgroundPreview = null;
            StateHasChanged();
        }
    }

    private async Task SaveCustomBackground()
    {
        if (_selectedBackgroundFile == null || _disposed) return;
        
        _isUploadingBackground = true;
        _backgroundUploadError = null;
        StateHasChanged();
        
        try
        {
            Console.WriteLine("Starting background save process...");
            var savedPath = await FileStorageService.SaveImageAsync(_selectedBackgroundFile);
            Console.WriteLine($"FileStorageService.SaveImageAsync returned: {savedPath}");
            if (_disposed) return;
            
            if (!string.IsNullOrEmpty(savedPath))
            {
                _customBackgroundPath = savedPath;
                Console.WriteLine($"Setting custom background path to: {_customBackgroundPath}");
                await ClientStorageService.SetItemAsync("custom_background_path", _customBackgroundPath);
                if (_disposed) return;
                
                Console.WriteLine("Applying background image...");
                await ApplyBackgroundImage();
                if (_disposed) return;
                
                Console.WriteLine("Background saved and applied successfully");
                CloseBackgroundUploadModal();
            }
            else
            {
                Console.WriteLine("SaveImageAsync returned null or empty");
                _backgroundUploadError = "Failed to upload background. Please check the file format and try again.";
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error uploading background: {ex.Message}");
            _backgroundUploadError = $"Upload error: {ex.Message}";
        }
        finally
        {
            if (!_disposed)
            {
                _isUploadingBackground = false;
                StateHasChanged();
            }
        }
    }

    private async Task RemoveCustomBackground()
    {
        if (_disposed) return;
        
        _customBackgroundPath = null;
        await ClientStorageService.RemoveItemAsync("custom_background_path");
        await JSRuntime.InvokeVoidAsync("removeCustomBackground");
        StateHasChanged();
    }

    [Inject] private NavigationManager NavigationManager { get; set; } = default!;

    public void Dispose()
    {
        SubscriptionManager.Dispose();
        _disposed = true;
        ThemeService.OnThemeChanged -= OnThemeChangedHandler;
        DashboardState.OnConfigLoaded -= OnConfigLoadedHandler;
        ViewOptions.OnChange -= HandleOptionsChanged;
    }
}
